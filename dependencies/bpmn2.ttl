# baseURI: http://www.reiter.at/ontology/bpmn2.0

@prefix : <http://www.reiter.at/ontology/bpmn2.0> .
@prefix bpmn: <http://www.reiter.at/ontology/bpmn2.0#bpmn:> .
@prefix bpmn2: <http://www.wageneder.at/ontology/bpmn2.0#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

dc:creator
  rdf:type owl:AnnotationProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0>
  rdf:type owl:Ontology ;
  dc:creator "Martina Reiter" ;
  rdfs:comment "BPMN 2.0 Ontology - created as part of the IPPR project at the Master Degree Course \"Information Management\" at the University of Applied Sciences in Graz, Austria." ;
.
<http://www.reiter.at/ontology/bpmn2.0#15.1_Interchanging_Incomplete_Models>
  rdf:type owl:Class ;
  rdfs:comment """In practice, it is common for models to be interchanged before they are complete. This occurs frequently when doing
iterative modeling, where one user (such as a subject matter expert or business person) first defines a high-level model,
and then passes it on to another user to be completed and refined.
Such “incomplete” models are ones in which all of the mandatory attributes have not yet been filled in, or the cardinality
lowerbound of attributes and associations has not been satisfied.
XMI allows for the interchange of such incomplete models. In BPMN, we extend this capability to interchange of XML
files based on the BPMN XSD. In such XML files, implementers are expected to support this interchange by:
• Disregarding missing attributes that are marked as ‘required’ in the XSD.
• Reducing the lower bound of elements with ‘minOccurs’ greater than 0.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BPELProcessExecutionConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Activities>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BPMNExecutionSemantics> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Activity>
  rdf:type owl:Class ;
  rdfs:comment """An Activity is a generic term for work that company
performs (see page 151) in a Process. An Activity
can be atomic or non-atomic (compound). The
types of Activities that are a part of a Process
Model are: Sub-Process and Task, which are
rounded rectangles. Activities are used in both
standard Processes and in Choreographies.

An Activity is work that is performed within a Business Process. An Activity can be atomic or non-atomic
(compound). The types of Activities that are a part of a Process are: Task, Sub-Process, and Call Activity, which
allows the inclusion of re-usable Tasks and Processes in the diagram. However, a Process is not a specific graphical
object. Instead, it is a set of graphical objects. The following sections will focus on the graphical objects Sub-Process
and Task.
Activities represent points in a Process flow where work is performed. They are the executable elements of a BPMN
Process.
The Activity class is an abstract element, sub-classing from FlowElement (as shown in Figure 10.6).
Concrete sub-classes of Activity specify additional semantics above and beyond that defined for the generic Activity

The Activity class is the abstract super class for all concrete Activity types.
The Activity element inherits the attributes and model associations of FlowElement (see Table 8.44). Table 10.3
presents the additional attributes and model associations of the Activity element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputOutputSpecification> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ioSpecification> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LoopCharacteristics> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCharacteristics> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BoundaryEvent> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#boundaryEventRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInputAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataInputAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutputAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataOutputAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputOutputSpecification> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ioSpecification> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LoopCharacteristics> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCharacteristics> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Property> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#properties> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceRole> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resources> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isForCompensation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#completionQuantity> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#startQuantity> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ActivityInstance>
  rdf:type <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
  rdf:type owl:Class ;
  rdf:type owl:NamedIndividual ;
  rdfs:comment """string = None

See Figure 13.2 (\"The Lifecycle of a BPMN Activity\") in Section 13.2.2
for permissible values""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#state> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#AdHocOrdering>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
.
<http://www.reiter.at/ontology/bpmn2.0#AdHocSub-Process>
  rdf:type owl:Class ;
  rdfs:comment """An Ad-Hoc Sub-Process is a specialized type of Sub-Process that is a group of Activities that have no REQUIRED
sequence relationships. A set of Activities can be defined for the Process, but the sequence and number of
performances for the Activities is determined by the performers of the Activities.

A Sub-Process is marked as being ad-hoc with a “tilde” symbol placed at the bottom center of the Sub-Process shape
(see Figure 10.35 and Figure 10.36).
 The marker for an Ad-Hoc Sub-Process MUST be a “tilde” symbol.
 The Ad-Hoc Marker MAY be used in combination with any of the other markers.

The Ad-Hoc Sub-Process element inherits the attributes and model associations of Activities (see Table 10.3) through
its relationship to Sub-Process. Table 10.22 presents the additional model associations of the Ad-Hoc Sub-Process.

Activities within the Process are generally disconnected from each other. During execution of the Process, any one or
more of the Activities MAY be active and they MAY be performed multiple times. The performers determine when
Activities will start, what the next Activity will be, and so on.
Examples of the types of Processes that are Ad-Hoc include computer code development (at a low level), sales
support, and writing a book chapter. If we look at the details of writing a book chapter, we could see that the Activities
within this Process include: researching the topic, writing text, editing text, generating graphics, including graphics in
the text, organizing references, etc. (see Figure 10.37). There MAY be some dependencies between Tasks in this
Process, such as writing text before editing text, but there is not necessarily any correlation between an instance of
writing text to an instance of editing text. Editing can occur infrequently and based on the text of many instances of the
writing text Task.

Although there is no explicit Process structure, some sequence and data dependencies can be added to the details of the
Process. For example, we can extend the book chapter Ad-Hoc Sub-Process shown above and add Data Objects,
Data Associations, and even Sequence Flows (Figure 10.38).
Ad-Hoc Sub-Processes restrict the use of BPMN elements that would normally be used in Sub-Processes.
 The list of BPMN elements that MUST be used in an Ad-Hoc Sub-Process: Activity.
 The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow,
 Association, Data Association, Group, Message Flow (as a source or target), Gateway, and
Intermediate Event.
 The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event,
 Conversations (graphically), Conversation Links (graphically), and Choreography Activities.

The Data Objects as inputs into the Tasks act as an additional constraint for the performance of those Tasks. The
performers still determine when the Tasks will be performed, but they are now constrained in that they cannot start the
Task without the appropriate input. The addition of Sequence Flows between the Tasks (e.g., between “Generate
Graphics” and “Include Graphics in Text”) creates a dependency where the performance of the first Task MUST be
followed by a performance of the second Task. This does not mean that the second Task is to be performed immediately,
but there MUST be a performance of the second Task after the performance of the first Task.
It is a challenge for a BPM engine to monitor the status of Ad-Hoc Sub-Processes, usually these kind of Processes
are handled through groupware applications (such as e-mail), but BPMN allows modeling of Processes that are not
necessarily executable, although there are some process engines that can follow an Ad-Hoc Sub-Process. Given this, at
some point the Ad-Hoc Sub-Process will have complete and this can be determined by evaluating a
completionCondition that evaluates Process attributes that will have been updated by an Activity in the
Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SubProcess> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#AdHocOrdering> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ordering> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#completionCondition> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#cancelRemainingInstances> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:disjointWith <http://www.reiter.at/ontology/bpmn2.0#TransactionSub-Process> ;
.
<http://www.reiter.at/ontology/bpmn2.0#All>
  rdf:type owl:Class ;
  rdfs:comment """All: no Event is ever thrown; a token is produced after completion
of all instances.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior> ;
.
<http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance>
  rdf:type owl:Class ;
  rdfs:comment "Analytic contains all of Descriptive and in total about half of the constructs in the full Process Modeling Conformance Class. It is based on experience gathered in BPMN training and an analysis of user-patterns in the Department of Defense Architecture Framework and planned standardization for that framework. Focus on visible elements and a minimal subset of supporting attributes/elements." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Artifact>
  rdf:type owl:Class ;
  rdfs:comment """Artifacts are used to provide additional information about the Process. There are two standardized Artifacts, but
modelers or modeling tools are free to add as many Artifacts as necessary. There could be additional BPMN efforts
to standardize a larger set of Artifacts for general use or for vertical markets. The current set of Artifacts
includes:
• Group
• Text Annotation

As an Artifact, a Group is not an Activity or any Flow Object, and, therefore, cannot connect to Sequence
Flows or Message Flows. In addition, Groups are not constrained by restrictions of Pools and Lanes. This means
that a Group can stretch across the boundaries of a Pool to surround Diagram elements (see Figure 8.14), often to
identify Activities that exist within a distributed business-to-business transaction.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifacts> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Artifacts>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Assignment>
  rdf:type owl:Class ;
  rdfs:comment """The Assignment class is used to specify a simple mapping of data elements using a specified Expression language.
The default Expression language for all Expressions is specified in the Definitions element, using the
expressionLanguage attribute. It can also be overridden on each individual Assignment using the same attribute.
The Assignment element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 10.64
presents the additional attributes of the Assignment element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#from> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#to> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Association>
  rdf:type owl:Class ;
  rdfs:comment """An Association is used to link information and
Artifacts with BPMN graphical elements (see page
67). Text Annotations (see page 71) and other
Artifacts (see page 66) can be Associated with the
graphical elements. An arrowhead on the
Association indicates a direction of flow (e.g.,
data), when appropriate.

An Association is used to associate information and Artifacts with Flow Objects. Text and graphical non-Flow
Objects can be associated with the Flow Objects and Flow. An Association is also used to show the Activity used for
compensation. More information about compensation can be found on page 302.
 An Association is line that MUST be drawn with a dotted single line (see Figure 8.9).
 The use of text, color, size, and lines for an Association MUST follow the rules defined in “Use of Text, Color, Size,
and Lines in a Diagram” on page 41.

If there is a reason to put directionality on the Association then:
 A line arrowhead MAY be added to the Association line (see Figure 8.11).
 The directionality of the Association can be in one (1) direction or in both directions.

Note that directional Associations were used in BPMN 1.2 to show how Data Objects were inputs or outputs to
Activities. In BPMN 2.0, a Data Association connector is used to show inputs and outputs (see page 221). A Data
Association uses the same notation as a directed Association (as in Figure 8.11, above).
An Association is used to connect user-defined text (an Annotation) with a Flow Object (see Figure 8.12).

The Association element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 8.20
presents the additional attributes and model associations for an Association.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#AssociationDirection> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#associationDirection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#AssociationDirection>
  rdf:type owl:Class ;
  rdfs:comment "associationDirection is an attribute that defines whether or not the Association shows any directionality with an arrowhead. The default is None (no arrowhead). A value of One means that the arrowhead SHALL be at the Target Object. A value of Both means that there SHALL be an arrowhead at both ends of the Association line." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifacts> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Auditing>
  rdf:type owl:Class ;
  rdfs:comment "The Auditing element and its model associations allow defining attributes related to auditing. It leverages the BPMN extensibility mechanism. This element is used by FlowElements and Process. The actual definition of auditing attributes is out of scope of this specification. BPMN 2.0 implementations can define their own set of attributes and their intended semantics." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPELProcessExecutionConformance>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CompleteConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNDiagram>
  rdf:type owl:Class ;
  rdfs:comment """BPMNDiagram is a kind of diagram that depicts all or part of a BPMN model.
Description
BPMNDiagram represents a depiction of all or part of a BPMN model. It specializes DI::Diagram and redefines the root
element (the top most diagram element) to be of type BPMNPlane. A BPMN diagram can also own a collection of
BPMNStyle elements that are referenced by BPMNLabel elements in the diagram. These style elements represent the
unique appearance styles used in the diagram.

Generalizations
• DI::Diagram
Associations
• + plane : BPMNPlane [1] {redefines rootElement}
a BPMN plane element that is the container of all diagram elements in this diagram.
• + labelStyle : BPMNLabelStyle [*] {subsets style}
a collection of BPMN label styles that are owned by the diagram and referenced by label elements.

Table 12.1 – BPMNDiagram XML schema
<xsd:complexType name=\"BPMNDiagram\">
<xsd:complexContent>
<xsd:extension base=\"di:Diagram\">
<xsd:sequence>
<xsd:element ref=\"bpmndi:BPMNPlane\"/>
<xsd:element ref=\"bpmndi:BPMNLabelStyle\" minOccurs=\"0\" maxOccurs=\"unbounded\"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Diagram> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabelStyle> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#labelStyle> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNPlane> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#plane> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNEdge>
  rdf:type owl:Class ;
  rdfs:comment """12.2.3.5 BPMNEdge [Class]
BPMNEdge is a kind of edge that can depict a relationship between two BPMN model elements.
Description
BPMNEdge represents a depiction of a relationship between two (source and target) BPMN model elements. It specializes
DI::LabeledEdge and redefines its model element reference to be of type (BPMN) BaseElement, allowing it to reference
a relationship element from a BPMN model.
BPMNEdge also redefines its source and target references to be of type DiagramElement (either BPMNShape or
BPMNEdge).
The source or target definition should only be present if the edge is depicted between a different source or target than the
one referenced by the BPMN model element of the BPMNEdge. Only the different source or target is REQUIRED. Both
attributes should be present only if both are different. This is the case, for instance, if a Message Flow target is not
depicted in the current diagram because it is inside a black box Pool. The Message Flow could then define its target as
being the BPMNShape depicting the Pool to connect it to the boundary of that black box Pool.
BPMNEdge also contains an optional label of type BPMNLabel that can be nested in the edge when it has a visible
textual label with its own bounding box.
All BPMNEdge elements are owned directly by a BPMNPlane (that is the root element in a BPMNDiagram). The
waypoints of BPMNEdge are always relative to that plane’s origin point and are REQUIRED to be positive coordinates.
Abstract Syntax
• Figure 12.4 - BPMN Edge
Generalizations
• DI::LabeledEdge
Associations
• + label : BPMNLabel [0..1] {subsets ownedLabel}
an optional label that is nested when the edge has a visible text label with its own bounding box.
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to a connecting BPMN element that this edge depicts. Note that this reference is only optional for
the specific case of a Data Association connected to a Sequence Flow; in all other cases a referenced element
must be provided.
• + sourceElement : DiagramElement [0..1] {redefines source}
an optional reference to the edge’s source element if it is different from the source inferred from the
bpmnElement association.
• + targetElement : DiagramElement [0..1] {redefines target}
an optional reference to the edge’s target element if it is different from the target inferred from the bpmnElement
association.
• messageVisibleKind : MessageVisibleKind [0..1]
an optional attribute that should be used only for Message Flow. It determines if an envelope decorator should be
depicted and the kind of envelope to be depicted.
Table 12.4 – BPMNEdge XML schema
<xsd:complexType name=\"BPMNEdge\">
<xsd:complexContent>
<xsd:extension base=\"di:LabeledEdge\">
<xsd:sequence>
<xsd:element ref=\"bpmndi:BPMNLabel\" minOccurs=\"0\" />
</xsd:sequence>
<xsd:attribute name=\"bpmnElement\" type=\"xsd:QName\" />
<xsd:attribute name=\"sourceElement\" type=\"xsd:QName\" />
<xsd:attribute name=\"targetElement\" type=\"xsd:QName\" />
<xsd:attribute name=\"messageVisibleKind\" type=\"bpmndi:MessageVisibleKind\" />
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#LabeledEdge> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabel> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#label> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DiagramElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DiagramElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageVisibleKind> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageVisibleKind> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabel> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#label> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DiagramElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DiagramElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageVisibleKind> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageVisibleKind> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNExecutionSemantics>
  rdf:type owl:Class ;
  rdfs:comment """Note – The content of this chapter is REQUIRED for BPMN Process Execution Conformance or for BPMN Complete
Conformance. However, this chapter is NOT REQUIRED for BPMN Process Modeling Conformance, BPMN Choreography
Conformance, or BPMN BPEL Process Execution Conformance. For more information about BPMN conformance types, see
page 2.
This section defines the execution semantics for orchestrations in BPMN 2.0. The purpose of this execution semantics is
to describe a clear and precise understanding of the operation of the elements. However, for some elements only
conceptual model is provided which does not specify details needed to execute them on an engine. These elements are
called non-operational. Implementations MAY extend the semantics of non-operational elements to make them
executable, but this is considered to be an optional extension to BPMN. Non-operational elements MAY be ignored by
implementations conforming to BPMN Process Execution Conformance type. The following elements are nonoperational:
• Manual Task
• Abstract Task
• DataState
• IORules
• Ad-Hoc Process
• ItemDefinitions with an itemKind of Physical
• the inputSetWithWhileExecuting attribute of DataInput
• the outputSetWithWhileExecuting attribute of DataOutput
• the isClosed attribute of Process
• the isImmediate attribute of Sequence Flow
The execution semantics are described informally (textually), and this is based on prior research involving the
formalization of execution semantics using mathematical formalisms.
This section provides the execution semantics of elements through the following structure:
• A description of the operational semantics of the element.
• Exception issues for the element where relevant.
• List of workflow patterns1
supported by the element where relevant.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessExecutionConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNLabel>
  rdf:type owl:Class ;
  rdfs:comment """BPMNLabel is a kind of label that depicts textual info about a BPMN element.
Description
BPMNLabel represents a depiction of some textual information about a BPMN element. It specializes DI::Label and
redefines its style reference to be of type BPMNLabelStyle, which contains information about the appearance of the label
(e.g., the chosen font). The referenced style is owned by the diagram that nests the label.
A BPMN label is not a top-level element but is always nested inside either a BPMNShape or a BPMNEdge. It does not
have its own reference to a BPMN element but rather inherits that reference (if any) from its parent shape or edge. The
textual info depicted by the label is derived from that referenced BPMN element.

The bounds of BPMNLabel are always relative to the containing plane’s origin point. Note that the bounds’ x and y
coordinates are the position of the upper left corner of the label (relative to the upper left corner of the plane).
Abstract Syntax
• Figure 12.3 - BPMN Shape
• Figure 12.4 - BPMN Edge
• Figure 12.5 - BPMN Label
Generalizations
• DI::Label
Associations
• + labelStyle : BPMNLabelStyle [0..1] {redefines style}
an optional reference to a label style (owned by the diagram) that gives the appearance options for the label. If
not specified, the style of the label can be assumed by a tool.

Table 12.5 – BPMNLabel XML schema
<xsd:complexType name=\"BPMNLabel\">
<xsd:complexContent>
<xsd:extension base=\"di:Label\">
<xsd:attribute name=\"labelStyle\" type=\"xsd:QName\" />
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Label> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabelStyle> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#labelStyle> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabelStyle> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#labelStyle> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNLabelStyle>
  rdf:type owl:Class ;
  rdfs:comment """12.2.3.8 BPMNLabelStyle [Class]
BPMNLabelStyle is a kind of style that gives the appearance options for a BPMNLabel.
Description
BPMNLabelStyle represents the appearance options for elements of type BPMNLabel. It specializes DI::Style and
contains a description of a font that is used in depicting a BPMNLabel. One or more labels may reference the same
BPMNLabelStyle element, which must be owned by a BPMNDiagram.
Abstract Syntax
• Figure 12.1 - BPMN Diagram
• Figure 12.5 - BPMN Label
Generalizations
• DI::Style
Attributes
• + font : Font[1] - a font object that describes the properties of the font used for depicting the labels that reference this
style.

Table 12.6 – BPMNLabelStyle XML schema
<xsd:complexType name=\"BPMNLabelStyle\">
<xsd:complexContent>
<xsd:extension base=\"di:Style\">
<xsd:sequence>
<xsd:element ref=\"dc:Font\"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Style> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Font> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#font> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNPlane>
  rdf:type owl:Class ;
  rdfs:comment """12.2.3.2 BPMNPlane [Class]
A BPMNPlane is the BPMNDiagram container of BPMNShape and BPMNEdge.
Description
A BPMNPlane specializes DI::Plane and redefines its model element reference to be of type (BPMN) BaseElement. A
BPMNPlane can only reference a BaseElement of the types: Process, SubProcess, AdHocSubProcess, Transaction,
Collaboration, Choreography or SubChoreography.
BPMNPlane element is always owned by a BPMNDiagram and represents the root diagram element of that diagram. The
plane represents a 2 dimensional surface with an origin at (0, 0) along the x and y axes with increasing coordinates to the
right and bottom. Only positive coordinates are allowed for diagram elements that are nested in a BPMNPlane. This
means that the union of all the nested elements' bounds is deemed to be located at the plane's origin point.
Abstract Syntax
• Figure 12.1 - BPMN Diagram
• Figure 12.2 - BPMN Plane
Generalizations
• DI::Plane

Associations
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to either a Process, SubProcess, AdHocSubProcess, Transaction, Collaboration, Choreography or
SubChoreography in a BPMN model.

Table 12.2 – BPMNPlane XML schema
<xsd:complexType name=\"BPMNPlane\">
<xsd:complexContent>
<xsd:extension base=\"di:Plane\">
<xsd:attribute name=\"bpmnElement\" type=\"xsd:QName\"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Plane> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#BPMNShape>
  rdf:type owl:Class ;
  rdfs:comment """12.2.3.3 BPMNShape [Class]
BPMNShape is a kind of shape that can depict a BPMN model element.
Description
BPMNShape represents a depiction of a (typically a node) BPMN model element. It specializes DI::LabeledShape and
redefines its model element reference to be of type (BPMN) BaseElement, allowing it to reference an element from a
BPMN model.
BPMNShape also contains an optional label of type BPMNLabel that can be nested in the shape when it has a visible
textual label with its own bounding box.
The shape also contains a number of normative notational options that can be specified for different types of BPMN
elements depicted by the shape. Those options, each represented by a separate property, and described below, allow for
recording the specific notational style desired for the shape.
All BPMNShape elements are owned directly by a BPMNPlane (that is the root element in a BPMNDiagram), i.e., shapes
are not nested within each other in the BPMN DI model although they may appear that way when depicted. The bounds
of a BPMNShape are always relative to that plane's origin point and are REQUIRED to be positive coordinates. Note that
the bounds’ x and y coordinates are the position of the upper left corner of the shape (relative to the upper left corner of
the plane).
Abstract Syntax
• Figure 12.3 - BPMN Shape
• Figure 12.4 - BPMN Edge
Generalizations
• DI::LabeledShape

Attributes
• + isHorizontal : Boolean [0..1]
an optional attribute that should be used only for Pools and Lanes. It determines if it should be depicted horizontally
(true) or vertically (false).
• + isExpanded : Boolean [0..1]
an optional attribute that should be used only for SubProcess, AdHocSubProcess, Transaction, SubChoreographies ,
CallActivities and CallChoreographies. It determines if it should be depicted expanded (true) or collapsed (false).
• + isMarkerVisible : Boolean [0..1]
an optional attribute that should be used only for Exclusive Gateway. It determines if the marker should be depicted on
the shape (true) or not (false).
• + participantBandKind : ParticipantBandKind [0..1]
an optional attribute that should only be used for Participant Bands. If this attribute is present, it means that the
participant should be depicted as a Participant Band instead of as a Pool.
• + isMessageVisible : Boolean [0..1]
an optional attribute that should only be used for Participant Bands. It determines if an envelope decorator should be
depicted linked to the Participant Band.
• + choreographyActivityShape : BPMNShape [0..1]
an optional attribute that should only be used for Participant Bands. It is REQUIRED for a BPMNShape depicting a
Participant Band. This is REQUIRED in order to relate the Participant Band to the BPMNShape depicting the
Choreography Activity that this Participant Band is related to.
Associations
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to a BPMN node element that this shape depicts. Note that although optional a bpmnElement must be
provided for a BPMNShape.
• + label : BPMNLabel [0..1] {subsets ownedLabel}
an optional label that is nested when the shape has a visible text label with its own bounding box.

Table 12.3 – BPMNShape XML schema
<xsd:complexType name=\"BPMNShape\">
<xsd:complexContent>
<xsd:extension base=\"di:LabeledShape\">
<xsd:sequence>
<xsd:element ref=\"bpmndi:BPMNLabel\" minOccurs=\"0\"/>
</xsd:sequence>
<xsd:attribute name=\"bpmnElement\" type=\"xsd:QName\"/>
<xsd:attribute name=\"isHorizontal\" type=\"xsd:boolean\"/>
<xsd:attribute name=\"isExpanded\" type=\"xsd:boolean\"/>
<xsd:attribute name=\"isMarkerVisible\" type=\"xsd:boolean\"/>
<xsd:attribute name=\"isMessageVisible\" type=\"xsd:boolean\"/>
<xsd:attribute name=\"participantBandKind\" type=\"bpmndi:ParticipantBandKind\"/>
<xsd:attribute name=\"choreographyActivityShape\" type=\"xsd:QName\"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#LabeledShape> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabel> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#label> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNShape> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#choreographyActivityShape> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantBandKind> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isExpanded> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isHorizontal> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isMarkerVisible> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isMessageVisible> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNLabel> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#label> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNShape> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#choreographyActivityShape> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#bpmnElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantBandKind> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isExpanded> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isHorizontal> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isMarkerVisible> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isMessageVisible> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Backward>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BaseElement>
  rdf:type owl:Class ;
  rdfs:comment "BaseElement is the abstract super class for most BPMN elements. It provides the attributes id and documentation, which other elements will inherit." ;
  rdfs:label "BaseElement"@de ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Documentation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#documentation> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ExtensionAttributeValue> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#extensionValues> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ExtensionDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#extensionDefinitions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#id> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Both>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BothAssociationDirection>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AssociationDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BoundaryEvent>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CatchEvent> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#attachedToRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#cancelActivity> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Boundary_error_Intermediate_Event>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BoundaryEvent> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#BusinessRuleTask>
  rdf:type owl:Class ;
  rdfs:comment """A Business Rule Task provides a mechanism for the Process to provide input to a Business Rules Engine and to get
the output of calculations that the Business Rules Engine might provide. The InputOutputSpecification of the
Task (see page 211) will allow the Process to send data to and receive data from the Business Rules Engine.
A Business Rule Task object shares the same shape as the Task, which is a rectangle that has rounded corners.
However, there is a graphical marker in the upper left corner of the shape that indicates that the Task is a Business
Rule Task (see Figure 10.11).
A Business Rule Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a marker
that distinguishes the shape from other Task types (as shown in Figure 10.19).
The Business Rule Task inherits the attributes and model associations of Activity (see Table 10.3). Table 10.11
presents the additional attributes of the Business Rule Task.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:equivalentClass <http://www.reiter.at/ontology/bpmn2.0#GlobalBusinessRuleTask> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CMOF>
  rdf:type owl:Class ;
.
<http://www.reiter.at/ontology/bpmn2.0#CallActivity>
  rdf:type owl:Class ;
  rdfs:comment """A Call Activity identifies a point in the Process where a global Process or a Global Task is used. The Call Activity acts as a ‘wrapper’ for the invocation of a global Process or Global Task within the execution. The activation of a call Activity results in the transfer of control to the called global Process or Global Task.

Reusable Sub-Process (Call Activity)
The reusable Sub-Process of BPMN 1.2 corresponds to the Call Activity that calls a pre-defined Process. See details
of a Call Activity on page 183.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledElement> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CallChoreography>
  rdf:type owl:Class ;
  rdfs:comment """A Call Choreography identifies a point in the Process where a global Choreography or a Global Choreography
Task is used. The Call Choreography acts as a place holder for the inclusion of the Choreography element it is
calling. This pre-defined called Choreography element becomes a part of the definition of the parent Choreography""" ;
  rdfs:comment """The Call Choreography element inherits the attributes and model associations of ChoreographyActivity (see
Figure 11.27 and Table 11.1). Table 11.4 presents the additional model associations of the Call Choreography element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivity> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledChoreographyRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledChoreographyRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantAssociations> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CallConversation>
  rdf:type owl:Class ;
  rdfs:comment """A Call Conversation identifies a place in the Conversation (Collaboration) where a global Conversation or a
GlobalConversation is used.
 If the Call Conversation calls a GlobalConversation, then the shape will be the same as a Conversation,
 but the boundary of the shape will MUST have a thick line (see Figure 9.25).
 If the Call Conversation calls a Collaboration, then the shape will be the same as a Sub-Conversation, but
 the boundary of the shape will MUST have a thick line (see Figure 9.26)

The Call Conversation element inherits the attributes and model associations of ConversationNode (see Table
9.10). Table 9.12 presents the additional model associations for the Call Conversation element.

Note - The ConversationNode attribute messageFlowRef doesn’t apply to Call Conversations""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledCollaborationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#calledCollaborationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantAssociations> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CallableElement>
  rdf:type owl:Class ;
  rdfs:comment """CallableElement is the abstract super class of all Activities that have been defined outside of a Process or
Choreography but which can be called (or reused), by a Call Activity, from within a Process or Choreography. It
MAY reference Interfaces that define the service operations that it provides. The BPMN elements that can be called
by Call Activities (i.e., are CallableElements) are: Process and GlobalTask (see Figure 10.43).
CallableElements are RootElements, which can be imported and used in other Definitions. When
CallableElements (e.g., Process) are defined, they are contained within Definitions.

The CallableElement inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 10.24 presents the additional attributes and model associations of the
CallableElement.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputOutputSpecification> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ioSpecification> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputOutputBinding> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ioBinding> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputOutputSpecification> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#ioSpecification> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Interface> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#supportedInterfaceRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CancelEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End is used within a Transaction Sub-Process. It will indicate
that the Transaction should be cancelled and will trigger a Cancel
Intermediate Event attached to the Sub-Process boundary. In addition,
it will indicate that a TransactionProtocol Cancel Message should
be sent to any Entities involved in the Transaction""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CancelEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """Cancel Event
Cancel Events are only used in the context of modeling Transaction Sub-Processes (see page 178 for more details
on Transactions). There are two variations: a catch Intermediate Event and an End Event.
 The catch Cancel Intermediate Event MUST only be attached to the boundary of a Transaction Sub-
 Process and, thus, MAY NOT be used in normal flow.
 The Cancel End Event MUST only be used within a Transaction Sub-Process and, thus, MAY NOT be used
 in any other type of Sub-Process or Process.
Figure 10.74 shows the variations of Cancel Events.
Figure 10.74 – Cancel Events
The CancelEventDefinition element inherits the attributes and model associations of BaseElement (see Table
8.5) through its relationship to the EventDefinition element (see page 260).""" ;
  rdfs:comment """Cancel Events are only used in the context of modeling Transaction Sub-Processes (see page 178 for more details
on Transactions). There are two variations: a catch Intermediate Event and an End Event.""" ;
  rdfs:comment """This type of End is used within a Transaction Sub-Process. It will indicate
that the Transaction should be cancelled and will trigger a Cancel
Intermediate Event attached to the Sub-Process boundary. In addition,
it will indicate that a TransactionProtocol Cancel Message should
be sent to any Entities involved in the Transaction.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CatchEvent>
  rdf:type owl:Class ;
  rdfs:comment """The CatchEvent element inherits the attributes and model associations of Event element

Common Catch Event attributes
The CatchEvent element inherits the attributes and model associations of Event element (see Table 10.81). Table
10.82 presents the additional attributes and model associations of the CatchEvent element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Event> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSet> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataOutputs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutputAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataOutputAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#eventDefinitionRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#eventDefinitions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSet> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#parallelMultiple> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:disjointWith <http://www.reiter.at/ontology/bpmn2.0#ThrowEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Catching_message_Intermediate_Event>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#IntermediateCatchEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Catching_timer_Intermediate_Event>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#IntermediateCatchEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Category>
  rdf:type owl:Class ;
  rdfs:comment """Categories, which have user-defined semantics, can be used for documentation or analysis purposes. For example,
FlowElements can be categorized as being customer oriented vs. support oriented. Furthermore, the cost and time of
Activities per Category can be calculated.
Groups are one way in which Categories of objects can be visually displayed on the diagram. That is, a Group is a
visual depiction of a single CategoryValue. The graphical elements within the Group will be assigned the
CategoryValue of the Group. The value of the CategoryValue, optionally prepended by the Category name
and delineator \":\", appears on the diagram as the Group label. (Note -- Categories can be highlighted through other
mechanisms, such as color, as defined by a modeler or a modeling tool). A single Category can be used for multiple
Groups in a diagram.
The Category element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 8.22 displays the additional model associations of the Category element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifacts> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CategoryValue> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#categoryValue> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CategoryValue>
  rdf:type owl:Class ;
  rdfs:comment """Categories, which have user-defined semantics, can be used for documentation or analysis purposes. For example, FlowElements can be categorized as being customer oriented vs. support oriented. Furthermore, the cost and time of Activities per Category can be calculated.
Groups are one way in which Categories of objects can be visually displayed on the diagram. That is, a Group is a visual depiction of a single CategoryValue.

The CategoryValue element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.23 displays the attributes and model associations of the CategoryValue element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifacts> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Category> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#category> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Category> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#category> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#categorizedFlowElements> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#value> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Choreography>
  rdf:type owl:Class ;
  rdfs:comment """A self-contained Choreography (no Pools or Orchestration) is a definition of the expected behavior, basically a
procedural contract, between interacting Participants. While a normal Process exists within a Pool, a Choreography
exists between Pools (or Participants).
The Choreography looks similar to a private Business Process since it consists of a network of Activities,
Events, and Gateways (see Figure 7.4). However, a Choreography is different in that the Activities are interactions
that represent a set (1 or more) of Message exchanges, which involves two or more Participants. In addition, unlike a
normal Process, there is no central controller, responsible entity or observer of the Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElementsContainer> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivities>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivity>
  rdf:type owl:Class ;
  rdfs:comment "A Choreography Activity represents a point in a Choreography flow where an interaction occurs between two or more Participants." ;
  rdfs:comment """The Choreography Activity element inherits the attributes and model associations of FlowElement (see Table 8.44)
through its relationship to FlowNode. Table 11.1 presents the additional model associations of the Choreography
Activity element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowNode> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationKey> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationKeys> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopType> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#initiatingParticipantRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyPackage> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyModelingConformance>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CompleteConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyPackage>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ChoreographyTask>
  rdf:type owl:Class ;
  rdfs:comment """A Choreography Task is an atomic Activity in a Choreography Process. It represents an Interaction, which is one
or two Message exchanges between two Participants. Using a Collaboration diagram to view these elements (see
page 109 for more information on Collaboration), we would see the two Pools representing the two Participants of the
Interaction (see Figure 11.7). The communication between the Participants is shown as a Message Flow.""" ;
  rdfs:comment """The Choreography Task element inherits the attributes and model associations of Choreography Activity (see
Table 11.1). Table 11.2 presents the additional model associations of the Choreography Task element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivity> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageFlowRefs> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure>
  rdf:type owl:Class ;
.
<http://www.reiter.at/ontology/bpmn2.0#Collaboration>
  rdf:type owl:Class ;
  rdfs:comment """A Collaboration depicts the interactions between two or more business entities. A Collaboration usually contains two
or more Pools, representing the Participants in the Collaboration. The Message exchange between the Participants
is shown by a Message Flow that connects two Pools (or the objects within the Pools). The Messages associated
with the Message Flows can also be shown. The Collaboration can be shown as two or more public Processes
communicating with each other (see Figure 7.3). With a public Process, the Activities for the Collaboration
participants can be considered the “touch-points” between the participants. The corresponding internal (executable)
Processes are likely to have much more Activity and detail than what is shown in the public Processes. Or a Pool
MAY be empty, a “black box.” Choreographies MAY be shown “in between” the Pools as they bisect the Message
Flows between the Pools. All combinations of Pools, Processes, and a Choreography are allowed in a
Collaboration.

Note – The contents of this chapter are REQUIRED for BPMN Choreography Modeling Conformance, BPMN Process
Modeling Conformance, or for BPMN Complete Conformance. However, this chapter is NOT REQUIRED for, BPMN
Process Execution Conformance or BPMN BPEL Process Execution Conformance. For more information about BPMN
conformance types, see page 2.
The Collaboration package contains classes that are used for modeling Collaborations, which is a collection of
Participants shown as Pools, their interactions as shown by Message Flows, and MAY include Processes within the
Pools and/or Choreographies between the Pools (see Figure 9.1). A Choreography is an extended type of
Collaboration. When a Collaboration is defined it is contained in Definitions.

The Collaboration element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 9.1 presents the additional attributes and model associations for the Collaboration
element.

A set of Messages Flow of a particular Collaboration MAY belong to a Conversation. A Conversation is a set of
Message Flows that share a particular purpose—i.e., they all relate to the handling of a single order (see page 124 for
more information about Conversations).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#artifacts> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Choreography> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#choreographyRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conversationAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationLink> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conversationLinks> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conversations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationKey> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationKeys> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageFlow> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlowAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageFlowAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participants> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isClosed> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Common>
  rdf:type owl:Class ;
  rdfs:comment "Common: Those classes which are common to the layers of Process, Choreography, and Collaboration." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BPMNExecutionSemantics> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Core> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance>
  rdf:type owl:Class ;
  rdfs:comment "Common Executable focuses on what is needed for executable process models." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CompensationAssociation>
  rdf:type owl:Class ;
  rdfs:comment """Compensation Association occurs outside the
normal flow of the Process and is based upon
a Compensation Intermediate Event that is
triggered through the failure of a transaction
or a throw Compensation Event (see page
302). The target of the Association MUST be
marked as a Compensation Activity""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CompensationEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that compensation is necessary. If an Activity
is identified, and it was successfully completed, then that Activity will be
compensated. The Activity MUST be visible from the Compensation
End Event, i.e., one of the following MUST be true:
• The Compensation End Event is contained in normal flow at the
same level of Sub-Process.
• The Compensation End Event is contained in a Compensation
Event Sub-Process that is contained in the Sub-Process
containing the Activity.
• If no Activity is identified, all successfully completed Activities
visible from the Compensation End Event are compensated, in
reverse order of their Sequence Flows. Visible means one of the
following:
• The Compensation End Event is contained in normal flow and at
the same level of Sub-Process as the Activities.
• The Compensation End Event is contained in a Compensation
Event Sub-Process that is contained in the Sub-Process
containing the Activities.
To be compensated, an Activity MUST have a boundary Compensation
Event or contain a Compensation Event Sub-Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CompensationEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """Compensation Event
Compensation Events are used in the context of triggering or handling compensation (see page 302 for more details
on compensation). There are four variations: a Start Event, both a catch and throw Intermediate Event, and an End
Event.
 The Compensation Start Event MAY NOT be used for a top-level Process.
 The Compensation Start Event MAY be used for an Event Sub-Process.
 The catch Compensation Intermediate Event MUST only be attached to the boundary of an Activity and,
 thus, MAY NOT be used in normal flow.
 The throw Compensation Intermediate Event MAY be used in normal flow.
 The Compensation End Event MAY be used within any Sub-Process or Process.
Figure 10.75 shows the variations of Compensation Events.""" ;
  rdfs:comment "Compensation Events are used in the context of triggering or handling compensation (see page 302 for more details on compensation). There are four variations: a Start Event, both a catch and throw Intermediate Event, and an End Event." ;
  rdfs:comment """The Compensation Start Event is only allowed for triggering an in-line
Compensation Event Sub-Process (see “Compensation Handler” on page 303).
This type of Event is triggered when compensation occurs.
If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass CompensationEventDefinition,
then the Event is a Compensation Start Event and uses a double triangle
marker (see the figure to the right). This Event does not interrupt the Process
since the Process has to be completed before this Event can be triggered.""" ;
  rdfs:comment """The CompensationEventDefinition element inherits the attributes and model associations of BaseElement
(see Table 8.5) through its relationship to the EventDefinition element (see page 260). Table 10.94 presents the
additional attributes and model associations of the CompensationEventDefinition element.""" ;
  rdfs:comment """This type of End indicates that compensation is necessary. If an Activity
is identified, and it was successfully completed, then that Activity will be
compensated. The Activity MUST be visible from the Compensation
End Event, i.e., one of the following MUST be true:
• The Compensation End Event is contained in normal flow at the
same level of Sub-Process.
• The Compensation End Event is contained in a Compensation
Event Sub-Process that is contained in the Sub-Process
containing the Activity.
• If no Activity is identified, all successfully completed Activities
visible from the Compensation End Event are compensated, in
reverse order of their Sequence Flows. Visible means one of the
following:
• The Compensation End Event is contained in normal flow and at
the same level of Sub-Process as the Activities.
• The Compensation End Event is contained in a Compensation
Event Sub-Process that is contained in the Sub-Process
containing the Activities.
To be compensated, an Activity MUST have a boundary Compensation
Event or contain a Compensation Event Sub-Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#activityRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#activityRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#waitForCompletion> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CompleteConformance>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Complex>
  rdf:type owl:Class ;
  rdfs:comment """Complex: the complexBehaviorDefinitions are consulted to
determine if and which Events to throw.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ComplexBehaviorDefinition>
  rdf:type owl:Class ;
  rdfs:comment """This element controls when and which Events are thrown in case behavior of the Multi-Instance Activity is set to
complex.
The ComplexBehaviorDefinition element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 10.31 presents the additional attributes and model associations for the
ComplexBehaviorDefinition element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FormalExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#condition> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ImplicitThrowEvent> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#event> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ComplexGateway>
  rdf:type owl:Class ;
  rdfs:comment "The Complex Gateway can be used to model complex synchronization behavior. An Expression activationCondition is used to describe the precise behavior." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateway> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#activationCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#activationCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ComplexGatewayInstance>
  rdf:type <http://www.reiter.at/ontology/bpmn2.0#ComplexGateway> ;
  rdf:type owl:Class ;
  rdf:type owl:NamedIndividual ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ComplexGateway> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#waitingForStart> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#activationCount> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ConditionalEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """Conditional Event
Figure 10.77 shows the variations of Conditional Events.
Figure 10.77 – Conditional Events
The ConditionalEventDefinition element inherits the attributes and model associations of BaseElement (see
Table 8.5) through its relationship to the EventDefinition element (see page 260). Table 10.95 presents the
additional model associations of the ConditionalEventDefinition element.
Figure 10.78 displays the class diagram for the ConditionalEventDefinition.
Figure 10.78 - ConditionalEventDefinition Class Diagram
The ConditionalEventDefinition element inherits the attributes and model associations of BaseElement (see
Table 8.5) through its relationship to the EventDefinition element (see page 260). Table 10.95 presents the
additional model associations of the ConditionalEventDefinition element.""" ;
  rdfs:comment """ConditionalEventDefinition
The Expression might be underspecified and provided in the form of natural
language. For executable Processes (isExecutable = true), if the trigger is
Conditional, then a FormalExpression MUST be entered.""" ;
  rdfs:comment """If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass ConditionalEventDefinition, then
the Event is a Conditional Start Event and uses an lined page marker (see the
figures to the right).
For a Conditional Event Sub-Process that interrupts its containing Process,
then the boundary of the Event is solid (see the upper figure to the right).
For a Conditional Event Sub-Process that does not interrupt its containing
Process, the boundary of the Event is dashed (see the lower figure on the right).""" ;
  rdfs:comment """The ConditionalEventDefinition element inherits the attributes and model associations of BaseElement through its relationship to the EventDefinition element

This type of event is triggered when a condition such as “S&P 500
changes by more than 10% since opening”, or “Temperature above 300C”
become true. The condition Expression for the Event MUST become
false and then true before the Event can be triggered again.
The Condition Expression of a Conditional Start Event MUST NOT
refer to the data context or instance attribute of the Process (as the Process
instance has not yet been created). Instead, it MAY refer to static
Process attributes and states of entities in the environment. The specification
of mechanisms to access such states is out of scope of the standard.
If there is only one EventDefinition associated with the Start Event
and that EventDefinition is of the subclass ConditionalEventDefinition,
then the Event is a Conditional Start Event and MUST be
displayed with a lined paper marker (see the figure to the right).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#condition> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ConditionalFlow>
  rdf:type owl:Class ;
  rdfs:comment """A Sequence Flow can have a condition
Expression that are evaluated at runtime to
determine whether or not the Sequence Flow
will be used (i.e., will a token travel down the
Sequence Flow – see page 97). If the
conditional flow is outgoing from an Activity,
then the Sequence Flow will have a minidiamond
at the beginning of the connector
(see figure to the right). If the conditional flow
is outgoing from a Gateway, then the line will
not have a mini-diamond (see figure in the
row above).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Converging>
  rdf:type owl:Class ;
  rdfs:comment "Converging: This Gateway MAY have multiple incoming Sequence Flows but MUST have no more than one (1) outgoing Sequence Flow." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GatewayDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Conversation>
  rdf:type owl:Class ;
  rdfs:comment """A Conversation is an atomic element for a Conversation (Collaboration) diagram. It represents a set of Message
Flows grouped together based on a concept and/or a CorrelationKey. A Conversation will involve two or more
Participants.
 A Conversation is a hexagon that MUST be drawn with a single thin line (see Figure 9.23).
The Conversation element inherits the attributes and model associations of ConversationNode (see Table 9.10),
but does not contain any additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conversationNodes> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ConversationAssociation>
  rdf:type owl:Class ;
  rdfs:comment """A ConversationAssociation is used within Collaborations and Choreographies to apply a reusable
Conversation to the Message Flows of those diagrams.
A ConversationAssociation is used when a diagram references a Conversation to provide Message
correlation information and/or to logically group Message Flows. It is used when:
• A Collaboration references a Choreography for inclusion between the Collaboration's Pools (Participants).
The ConversationNodes of the Choreography (the inner diagram) need to be mapped to the
ConversationNodes of the Collaboration (the outer diagram)
The ConversationAssociation element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 9.14 presents the additional model associations for the ConversationAssociation element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Conversations> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#innerConversationNodeRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#innerConversationNodeRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outerConversationNodeRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ConversationLink>
  rdf:type owl:Class ;
  rdfs:comment """Conversation Links are used to connect ConversationNodes to and from Participants (Pools -- see Figure 9.27).
 Conversation Links MUST be drawn with double thin lines.

Processes can appear in the Participants (Pools) of Conversation diagrams, as shown in Figure 9.28. The invoicing
and ordering Conversations have links into Activities and Events of the Process in the Order Processor. The other
two Conversations do not have their links “expanded.” Conversation Links into Activities that are not Send or
Receive Tasks indicate that the Activity will send or receive Messages of the Conversation at some level of
nesting

The Conversation Link element inherits the attributes and model associations of BaseElement (see Table 8.5).
Table 9.13 presents the additional attributes and model associations for the Conversation Link element.

Conversation Links for Call Conversations show the names of Participants in nested Collaboration or global
Collaborations, as identified by ParticipantAssociations. For example, Figure 9.30 has a Collaboration on
the left with a Call Conversations to a Collaboration on the right. The Conversation Links on the left indicate 
which Participants in the called Collaboration on the right correspond to which Participants in the calling
Collaboration on the left. For example, the Credit Agency Participants on the right corresponds to the Financial
Company Participant on the left. ParticipantAssociations (not shown) tie each Participant in the
Collaboration on the left to a Participant in the Collaboration on the right. They can be used to show the names of
Participants in nested Collaboration or global Collaborations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Conversations> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InteractionNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InteractionNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ConversationNode>
  rdf:type owl:Class ;
  rdfs:comment """ConversationNode is the abstract super class for all elements that can comprise the Conversation elements of a
Collaboration diagram, which are Conversation (see page 130), Sub-Conversation (see page 130), and Call
Conversation (see page 131).
ConversationNodes are linked to and from Participants using Conversation Links (see page 132).
The ConversationNode element inherits the attributes and model associations of BaseElement (see Table 8.5).
Table 9.10 presents the additional attributes and model associations for the ConversationNode element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Conversations> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationKey> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationKeys> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageFlowRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantRefs> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Conversations>
  rdf:type owl:Class ;
  rdfs:comment """The Conversation diagram is a particular usage of and an informal description of a Collaboration diagram. However,
the Pools of a Conversation usually do not contain a Process and a Choreography is usually not placed in
between the Pools of a Conversation diagram. A Conversation is the logical relation of Message exchanges. The
logical relation, in practice, often concerns a business object(s) of interest, e.g., “Order,” “Shipment and Delivery,” or
“Invoice.”
Message exchanges are related to each other and reflect distinct business scenarios. For example, in logistics, stock
replenishments involve the following type scenarios: creation of sales orders; assignment of carriers for shipments
combining different sales orders; crossing customs/quarantine; processing payment and investigating exceptions. Thus, a
Conversation diagram, as shown in Figure 7.5, shows Conversations (as hexagons) between Participants (Pools).
This provides a “bird’s eye” perspective of the different Conversations that relate to the domain.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Core>
  rdf:type owl:Class ;
  rdfs:comment """The Core is intended to be simple, concise, and extendable
with well defined behavior.
The Core contains three sub-packages""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#CorrelationKey>
  rdf:type owl:Class ;
  rdfs:comment """A CorrelationKey represents a composite key out of one or many CorrelationProperties that essentially
specify extraction Expressions atop Messages. As a result, each CorrelationProperty acts as a partial key
for the correlation. For each Message that is exhanged as part of a particular Conversation, the
CorrelationProperties need to provide a CorrelationPropertyRetrievalExpression which
references a FormalExpression to the Message payload. That is, for each Message (that is used in a
Conversation) there is an Expression, which extracts portions of the respective Message’s payload.
The CorrelationKey element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.31 displays the additional model associations of the CorrelationKey element.

Key-based Correlation
Key-based correlation is a simple and efficient form of correlation, where one or more keys are used to identify a
Conversation. Any incoming Message can be matched against the CorrelationKey by extracting the
CorrelationProperties from the Message according to the corresponding
CorrelationPropertyRetrievalExpression and comparing the resulting composite key with the
CorrelationKey instance for this Conversation. The idea is to use a joint Conversation “token” which is used
(passed to and received from) and outgoing and incoming Message. Messages are associated to a particular
Conversation if the composite key extracted from their payload matches the CorrelationKey initialized for this
Conversation.
At runtime the first Send Task or Receive Task in a Conversation MUST populate at least one of the
CorrelationKey instances by extracting the values of the CorrelationProperties according to the
CorrelationPropertyRetrievalExpression from the initially sent or received Message. Later in the
Conversation, the populated CorrelationKey instances are used for the described matching procedure where from
incoming Messages a composite key is extracted and used to identify the associated Conversation. Where these noninitiating
Messages derive values for CorrelationKeys, associated with the Conversation but not yet populated,
then the derived value will be associated with the Conversation instance.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationProperty> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationPropertyRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CorrelationProperty>
  rdf:type owl:Class ;
  rdfs:comment """The CorrelationProperties, representing the partial keys of this
CorrelationKey

The CorrelationProperty element inherits the attributes and model associations of BaseElement (see Table 8.5)
through its relationship to RootElement. Table 8.32 displays the additional model associations of the
CorrelationProperty element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#type> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#type> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationPropertyRetrievalExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationPropertyRetrievalExpression> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CorrelationPropertyBinding>
  rdf:type owl:Class ;
  rdfs:comment """CorrelationPropertyBindings represent the partial keys of a CorrelationSubscription where each
relates to a specific CorrelationProperty in the associated CorrelationKey. A FormalExpression defines
how that CorrelationProperty instance is populated and updated at runtime from the Process context (i.e., its
Data Objects and Properties).

The CorrelationPropertyBinding element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 8.35 displays the additional model associations of the CorrelationPropertyBinding element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationProperty> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationPropertyRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FormalExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataPath> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CorrelationPropertyRetrievalExpression>
  rdf:type owl:Class ;
  rdfs:comment """The CorrelationPropertyRetrievalExpression element inherits the attributes and model associations of
BaseElement (see Table 8.5). Table 8.33 displays the additional model associations of the
CorrelationPropertyRetrievalExpression element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FormalExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messagePath> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#CorrelationSubscription>
  rdf:type owl:Class ;
  rdfs:comment """The CorrelationSubscription element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 8.34 displays the additional model associations of the CorrelationSubscription element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationPropertyBinding> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationPropertyBinding> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationKey> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationKeyRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DI-meta-model>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Data>
  rdf:type owl:Class ;
  rdfs:comment """Data is represented with the four elements:
1. Data Objects
2. Data Inputs
3. Data Outputs
4. Data Stores""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataAssociation>
  rdf:type owl:Class ;
  rdfs:comment """Data Associations
Data Associations are used to move data between Data Objects, Properties, and inputs and outputs of
Activities, Processes, and GlobalTasks. Tokens do not flow along a Data Association, and as a result they have
no direct effect on the flow of the Process.
The purpose of retrieving data from Data Objects or Process Data Inputs is to fill the Activities inputs and later
push the output values from the execution of the Activity back into Data Objects or Process Data Outputs.
DataAssociation
The DataAssociation class is a BaseElement contained by an Activity or Event, used to model how data is
pushed into or pulled from item-aware elements. DataAssociation elements have one or more sources and a target;
the source of the association is copied into the target.
The ItemDefinition from the souceRef and targetRef MUST have the same ItemDefinition or the
DataAssociation MUST have a transformation Expression that transforms the source ItemDefinition into the
target ItemDefinition.

Optionally, Data Associations can be visually represented in the diagram by using the Association connector style (see
Figure 10.65 and Figure 10.66).

The core concepts of a DataAssociation are that they have sources, a target, and an optional transformation.
When a data association is “executed,” data is copied to the target. What is copied depends if there is a transformation
defined or not.
If there is no transformation defined or referenced, then only one source MUST be defined, and the contents of this source
will be copied into the target.

If there is a transformation defined or referenced, then this transformation Expression will be evaluated and the result
of the evaluation is copied into the target. There can be zero (0) to many sources defined in this case, but there is no
requirement that these sources are used inside the Expression.
In any case, sources are used to define if the data association can be “executed,” if any of the sources is in the state of
“unavailable,” then the data association cannot be executed, and the Activity or Event where the data association is
defined MUST wait until this condition is met.
Data Associations are always contained within another element that defines when these data associations are going to
be executed. Activities define two sets of data associations, while Events define only one.
For Events, there is only one set, but they are used differently for catch or throw Events. For a catch Event, data
associations are used to push data from the Message received into Data Objects and properties. For a throw Event,
data associations are used to fill the Message that is being thrown.
As DataAssociations are used in different stages of the Process and Activity lifecycle, the possible sources and targets
vary according to that stage. This defines the scope of possible elements that can be referenced as source and target. For
example: when an Activity starts executing, the scope of valid targets include the Activity data inputs, while at the end
of the Activity execution, the scope of valid sources include Activity data outputs.
The DataAssociation element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
10.63 presents the additional model associations of the DataAssociation element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#transformation> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Assignment> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#assignment> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#transformation> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataInput>
  rdf:type owl:Class ;
  rdfs:comment """A Data Input is a declaration that a particular kind of data will be used as input of the
InputOutputSpecification. There may be multiple Data Inputs associated with an
InputOutputSpecification.
The Data Input is an item-aware element. Data Inputs are visually displayed on a Process diagram to show the inputs
to the top-level Process or to show the inputs of a called Process (i.e., one that is referenced by a Call Activity, where
the Call Activity has been expanded to show the called Process within the context of a calling Process).
 Visualized Data Inputs have the same notation as Data Objects, except that they MUST contain a small, unfilled
 block arrow (see Figure 10.58).
 Data Inputs MAY have incoming Data Associations:
 If the Data Input is directly contained by the top-level Process, it MUST not be the target of Data
 Associations within the underlying model. Only Data Inputs that are contained by Activities or Events
 MAY be the target of Data Associations in the model.
 If the Process is being called from a Call Activity, the Data Associations that target the Data Inputs of
 the Call Activity in the underlying model MAY be visualized such that they connect to the corresponding Data
 Inputs of the called Process, visually crossing the Call Activity boundary. But note that this is visualization
 only. In the underlying model, the Data Associations target the Data Inputs of the Call Activity and not
 the Data Inputs of the called Process.

The “optional” attribute defines if a DataInput is valid even if the state is “unavailable.” The default value is false. If
the value of this attribute is true, then the execution of the Activity will not begin until a value is assigned to the
DataInput element, through the corresponding Data Associations.
States
DataInput elements can optionally reference a DataState element, which is the state of the data contained in the
DataInput. The definition of these states, e.g., possible values, and any specific semantics are out of scope of this
specification. Therefore, BPMN adopters can use the DataState element and the BPMN extensibility capabilities to
define their states.

The DataInput element inherits the attributes and model associations of BaseElement (see Table 8.5) and
ItemAwareElement (Table 10.52). Table 10.59 presents the additional attributes and model associations of the
DataInput element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSetWithOptional> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSetWithWhileExecuting> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSetRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isCollection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataInputAssociation>
  rdf:type owl:Class ;
  rdfs:comment """A Data Input is a declaration that a particular kind of data will be used as input of the InputOutputSpecification.

Data Inputs MAY have incoming Data Associations

The DataInputAssociation can be used to associate an ItemAwareElement element with a DataInput
contained in an Activity. The source of such a DataAssociation can be every ItemAwareElement accessible in the
current scope, e.g., a Data Object, a Property, or an Expression.
The DataInputAssociation element inherits the attributes and model associations of DataAssociation (see
Table 10.64), but does not contain any additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DataAssociation> ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataObject>
  rdf:type owl:Class ;
  rdfs:comment """Data Objects provide information about what
Activities require to be performed and/or what they
produce (see page 205), Data Objects can
represent a singular object or a collection of
objects. Data Input and Data Output provide the
same information for Processes.

Data Objects
The primary construct for modeling data within the Process flow is the DataObject element. A DataObject has a
well-defined lifecycle, with resulting access constraints.
DataObject
The Data Object class is an item-aware element. Data Object elements MUST be contained within Process or SubProcess
elements. Data Object elements are visually displayed on a Process diagram. Data Object References are
a way to reuse Data Objects in the same diagram. They can specify different states of the same Data Object at
different points in a Process. Data Object Reference cannot specify item definitions, and Data Objects cannot
specify states. The names of Data Object References are derived by concatenating the name of the referenced Data
Data Object the state of the Data Object Reference in square brackets as follows: <Data Object Name> [ <Data
Object Reference State> ].

The DataObject element inherits the attributes and model associations of FlowElement (see Table 8.44) and
ItemAwareElement (Table 10.52). Table 10.54 presents the additional attributes of the DataObject element.

Data Objects representing a Collection of Data
A DataObject element that references an ItemDefinition marked as collection has to be visualized differently,
compared to single instance data structures. The notation looks as follows:
Single instance (see Figure 10.52)

Visual representations of Data Objects
Data Object can appear multiple times in a Process diagram. Each of these appearances references the same Data
Object instance. Multiple occurrences of a Data Object in a diagram are allowed to simplify diagram connections.
Lifecycle and Accessibility
The lifecycle of a Data Object is tied to the lifecycle of its parent Process or Sub-Process. When a Process or
Sub-Process is instantiated, all Data Objects contained within it are also instantiated. When a Process or SubProcess
instance is disposed, all Data Object instances contained within it are also disposed. At this point the data
within these instances are no longer available.
The accessibility of a Data Object is driven by its lifecycle. The data within a Data Object can only be accessed when
there is guaranteed to be a live Data Object instance present. As a result, a Data Object can only be accessed by its
immediate parent (Process or Sub-Process), or by its sibling Flow Elements and their children, including Data
Object References referencing the Data Object.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isCollection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:disjointWith <http://www.reiter.at/ontology/bpmn2.0#Property> ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataObjectReference>
  rdf:type owl:Class ;
  rdfs:comment """The Data Object Reference element inherits the attributes and model associations of ItemAwareElement (Table
10.52) and FlowElement (see Table 8.44). Table 10.53 presents the additional attributes of the Data Object
Reference element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataObject> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataObjectRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataOutput>
  rdf:type owl:Class ;
  rdfs:comment """A Data Output is a declaration that a particular kind of data can be produced as output of the
InputOutputSpecification. There MAY be multiple Data Outputs associated with a
InputOutputSpecification.
The Data Output is an item-aware element. Data Output are visually displayed on a top-level Process diagram to
show the outputs of the Process (i.e., one that is referenced by a Call Activity, where the Call Activity has been
expanded to show the called Process within the context of a calling Process).
 Visualized Data Outputs have the same notation as Data Objects, except that they MUST contain a small, filled
 block arrow (see Figure 10.60).
 Data Outputs MAY have outgoing DataAssociations.
 If the Data Output is directly contained by the top-level Process, it MUST not be the source of Data
 Associations within the underlying model. Only Data Outputs that are contained by Activities or Events
 MAY be the target of Data Associations in the model.
 If the Process is being called from a Call Activity, the Data Associations that target the Data Outputs of
 the Call Activity in the underlying model MAY be visualized such that they connect to the corresponding Data
 Outputs of the called Process, visually crossing the Call Activity boundary. But note that this is
 visualization only. In the underlying model, the Data Associations originate the Data Outputs of the Call
 Activity and not the Data Outputs of the called Process

States
DataOutput elements can optionally reference a DataState element, which is the state of the data contained in the
DataOutput. The definition of these states, e.g., possible values, and any specific semantics are out of scope of this
specification. Therefore, BPMN adopters can use the DataState element and the BPMN extensibility capabilities to
define their states.

The DataOutput element inherits the attributes and model associations of BaseElement (see Table 8.5) and
ItemAwareElement (Table 10.52). Table 10.60 presents the additional attributes and model associations of the
DataInput element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSetWithOptional> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSetWithWhileExecuting> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSetRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isCollection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataOutputAssociation>
  rdf:type owl:Class ;
  rdfs:comment """A Data Output is a declaration that a particular kind of data can be produced as output of the InputOutputSpecification.

Data Outputs MAY have outgoing DataAssociations.

The DataOutputAssociation can be used to associate a DataOutput contained within an ACTIVITY with any
ItemAwareElement accessible in the scope the association will be executed in. The target of such a
DataAssociation can be every ItemAwareElement accessible in the current scope, e.g., a Data Object, a
Property, or an Expression.
The DataOutputAssociation element inherits the attributes and model associations of DataAssociation (see
Table 10.64), but does not contain any additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DataAssociation> ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataState>
  rdf:type owl:Class ;
  rdfs:comment """States
Data Object elements can optionally reference a DataState element, which is the state of the data contained in the
Data Object (see an example of DataStates used for Data Objects in Figure 7.8). The definition of these states, e.g.,
possible values and any specific semantic are out of scope of this specification. Therefore, BPMN adopters can use the
State element and the BPMN extensibility capabilities to define their states.
The DataState element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 10.54
presents the additional attributes and model associations of the DataObject element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataStore>
  rdf:type owl:Class ;
  rdfs:comment """A DataStore provides a mechanism for Activities to retrieve or update stored information that will persist beyond the
scope of the Process. The same DataStore can be visualized, through a Data Store Reference, in one or more
places in the Process.
The Data Store Reference is an ItemAwareElement and can thus be used as the source or target for a Data
Association. When data flows into or out of a Data Store Reference, it is effectively flowing into or out of the
DataStore that is being referenced.
The DataStore element inherits the attributes and model associations of FlowElement (see Table 8.44) through its
relationship to RootElement, and ItemAwareElement (see Table 10.51). Table 10.55 presents the additional
attributes of the DataStore element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#capacity> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#capacity> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isUnlimited> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DataStoreReference>
  rdf:type owl:Class ;
  rdfs:comment """The Data Store Reference element inherits the attributes and model associations of FlowElement (see Table 8.44)
and ItemAwareElement (see Table 10.51). Table 10.56 presents the additional model associations of the Data Store
Reference element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataStore> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataStoreRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DefaultFlow>
  rdf:type owl:Class ;
  rdfs:comment """For Data-Based Exclusive Gateways or
Inclusive Gateways, one type of flow is the
Default condition flow (see page 97). This flow
will be used only if all the other outgoing
conditional flow is not true at runtime. These
Sequence Flows will have a diagonal slash
will be added to the beginning of the
connector (see the figure to the right).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Definitions>
  rdf:type owl:Class ;
  rdfs:comment """The Definitions class is the outermost containing object for all BPMN elements. It defines the scope of visibility and the namespace for all contained elements. The interchange of BPMN files will always be through one or more Definitions.

The Definitions element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 8.1 presents the additional attributes and model associations of the Definitions element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Infrastructure> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#exporter> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#exporterVersion> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#expressionLanguage> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#typeLanguage> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BPMNDiagram> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#diagrams> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Extension> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#extensions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Import> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#imports> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Relationship> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#relationships> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#rootElements> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#exporter> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#exporterVersion> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#expressionLanguage> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#typeLanguage> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetNamespace> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance>
  rdf:type owl:Class ;
  rdfs:comment "Descriptive is concerned with visible elements and attributes used in high-level modeling. It should be comfortable for analysts who have used BPA flowcharting tools. Focus on visible elements and a minimal subset of supporting attributes/elements." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Diagram>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#DiagramElement>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Diagram> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Diverging>
  rdf:type owl:Class ;
  rdfs:comment "Diverging: This Gateway MAY have multiple outgoing Sequence Flows but MUST have no more than one (1) incoming Sequence Flow." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GatewayDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Documentation>
  rdf:type owl:Class ;
  rdfs:comment """All BPMN elements that inherit from the BaseElement will have the capability, through the Documentation
element, to have one (1) or more text descriptions of that element.
The Documentation element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.6 presents the additional attributes of the Documentation element.

In the BPMN schema, the tDocumentation complexType does not contain a text attribute or element. Instead, the
documentation text is expected to appear in the body of the documentation element. For example:

<documentation>An example of how the documentation text is entered.</documentation>""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#text> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#textFormat> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Element>
  rdf:type owl:Class ;
  rdfs:comment "Abstract Definiton of an Element" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CMOF> ;
.
<http://www.reiter.at/ontology/bpmn2.0#EndEvent>
  rdf:type owl:Class ;
  rdfs:comment "As the name implies, the End Event indicates where a Process will end. In terms of Sequence Flows, the End Event ends the flow of the Process, and thus, will not have any outgoing Sequence Flows—no Sequence Flow can connect from an End Event." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ThrowEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#EndPoint>
  rdf:type owl:Class ;
  rdfs:comment """The actual definition of the service address is out of scope of BPMN 2.0. The EndPoint element is an extension point
and extends from RootElement. The EndPoint element MAY be extended with endpoint reference definitions
introduced in other specifications (e.g., WS-Addressing).
EndPoints can be specified for Participant""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Service> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Error>
  rdf:type owl:Class ;
  rdfs:comment """An Error represents the content of an Error Event or the Fault of a failed Operation. An ItemDefinition is
used to specify the structure of the Error. An Error is generated when there is a critical problem in the processing of
an Activity or when the execution of an Operation failed.
Figure 8.18 - Error class diagram
The Error element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to RootElement. Table 8.41 presents the additional attributes and model associations of the Error
element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#errorCode> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ErrorEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that a named Error should be generated. All
currently active threads in the particular Sub-Process are terminated as a
result. The Error will be caught by a Catch Error Intermediate Event with
the same errorCode or no errorCode which is on the boundary of the
nearest enclosing parent Activity (hierarchically). The behavior of the
Process is unspecified if no Activity in the hierarchy has such an Error
Intermediate Event. The system executing the process can define additional
Error handling in this case, a common one being termination of the
Process instance.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ErrorEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment "An Error represents the content of an Error Event or the Fault of a failed Operation. An ItemDefinition is used to specify the structure of the Error. An Error is generated when there is a critical problem in the processing of an Activity or when the execution of an Operation failed." ;
  rdfs:comment """Error Event
Figure 10.79 shows the variations of Conditional Events.
Figure 10.79 – Error Events
Figure 10.80 displays the class diagram for the ErrorEventDefinition.
Figure 10.80 - ErrorEventDefinition Class Diagram
The ErrorEventDefinition element inherits the attributes and model associations of BaseElement (see Table
8.5) through its relationship to the EventDefinition element (see page 260). Table 10.96 presents the additional
attributes and model associations of the ErrorEventDefinition element.""" ;
  rdfs:comment """The Error Start Event is only allowed for triggering an in-line Event SubProcess.

If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass ErrorEventDefinition, then the
Event is an Error Start Event and uses a lightning marker (see the figures to the
right).
Given the nature of Errors, an Event Sub-Process with an Error trigger will
always interrupt its containing Process.""" ;
  rdfs:comment "The ErrorEventDefinition element inherits the attributes and model associations of BaseElement through its relationship to the EventDefinition element" ;
  rdfs:comment """This type of End indicates that a named Error should be generated. All
currently active threads in the particular Sub-Process are terminated as a
result. The Error will be caught by a Catch Error Intermediate Event with
the same errorCode or no errorCode which is on the boundary of the
nearest enclosing parent Activity (hierarchically). The behavior of the
Process is unspecified if no Activity in the hierarchy has such an Error
Intermediate Event. The system executing the process can define additional
Error handling in this case, a common one being termination of the
Process instance.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Error> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#error> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Error> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#error> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Escalation>
  rdf:type owl:Class ;
  rdfs:comment """An Escalation identifies a business situation that a Process might need to react to. An ItemDefinition is used
to specify the structure of the Escalation. 

The Escalation element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to RootElement. Table 8.41 presents the additional model associations of the Error element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Events> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#escalationCode> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#EscalationEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that an Escalation should be triggered. Other
active threads are not affected by this and continue to be executed. The
Escalation will be caught by a Catch Escalation Intermediate Event with
the same escalationCode or no escalationCode which is on the
boundary of the nearest enclosing parent Activity (hierarchically). The
behavior of the Process is unspecified if no Activity in the hierarchy has
such an Escalation Intermediate Event.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#EscalationEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """An Escalation identifies a business situation that a Process might need to react to. An ItemDefinition is used
to specify the structure of the Escalation.""" ;
  rdfs:comment """Escalation Event Sub-Processes implement measures to expedite the
completion of a business Activity, should it not satisfy a constraint specified on
its execution (such as a time-based deadline).
The Escalation Start Event is only allowed for triggering an in-line Event SubProcess.
If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass EscalationEventDefinition, then
the Event is an Escalation Start Event and uses an arrowhead marker (see the
figures to the right).
For an Escalation Event Sub-Process that interrupts its containing Process,
the boundary of the Event is solid (see the upper figure to the right).
For an Escalation Event Sub-Process that does not interrupt its containing
Process, the boundary of the Event is dashed (see the lower figure on the right).""" ;
  rdfs:comment "The EscalationEventDefinition element inherits the attributes and model associations of BaseElement through its relationship to the EventDefinition element" ;
  rdfs:comment """This type of End indicates that an Escalation should be triggered. Other
active threads are not affected by this and continue to be executed. The
Escalation will be caught by a Catch Escalation Intermediate Event with
the same escalationCode or no escalationCode which is on the
boundary of the nearest enclosing parent Activity (hierarchically). The
behavior of the Process is unspecified if no Activity in the hierarchy has
such an Escalation Intermediate Event.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Escalation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#escalationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Escalation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#escalationRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Event>
  rdf:type owl:Class ;
  rdfs:comment """An Event is something that “happens” during the
course of a Process (see page 238) or a
Choreography (see page 339). These Events
affect the flow of the model and usually have a
cause (trigger) or an impact (result). Events are
circles with open centers to allow internal markers
to differentiate different triggers or results. There
are three types of Events, based on when they
affect the flow: Start, Intermediate, and End.

Common Event attributes
The Event element inherits the attributes and model associations of FlowElement (see Table 8.44). Table 10.81
presents the additional model associations of the Event element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Events> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Property> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#properties> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#EventBasedGateway>
  rdf:type owl:Class ;
  rdfs:comment "The Event-Based Gateway represents a branching point in the Process where the alternative paths that follow the Gateway are based on Events that occur, rather than the evaluation of Expressions using Process data (as with an Exclusive or Inclusive Gateway). A specific Event, usually the receipt of a Message, determines the path that will be taken. Basically, the decision is made by another Participant, based on data that is not visible to Process, thus, requiring the use of the Event-Based Gateway." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateway> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventBasedGatewayType> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#eventGatewayType> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#instantiate> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#EventBasedGatewayType>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateways> ;
  rdfs:subClassOf [
      rdf:type owl:Class ;
      owl:unionOf (
          <http://www.reiter.at/ontology/bpmn2.0#Exclusive>
          <http://www.reiter.at/ontology/bpmn2.0#Parallel>
        ) ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#EventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """Event Definitions refers to the triggers of Catch Events (Start and receive Intermediate Events) and the
Results of Throw Events (End Events and send Intermediate Events). The types of Event Definitions are:
CancelEventDefinition, CompensationEventDefinition, ConditionalEventDefinition,
ErrorEventDefinition, EscalationEventDefinition, MessageEventDefinition,
LinkEventDefinition, SignalEventDefinition, TerminateEventDefinition, and
TimerEventDefinition (see Table 10.93). A None Event is determined by an Event that does not specify an
Event Definition. A Multiple Event is determined by an Event that specifies more than one Event Definition. The
different types of Events (Start, End, and Intermediate) utilize a subset of the available types of Event Definitions.

The following sections will present the attributes common to all Event Definitions and the specific attributes for the
Event Definitions that have additional attributes. Note that the Cancel and Terminate Event Definitions do not have
additional attributes.
Event Definition Metamodel
Figure 10.73 shows the class diagram for the abstract class EventDefinition. When one of the EventDefinition
sub-types (e.g., TimerEventDefinition) is defined it is contained in Definitions, or a contained
EventDefinition contained in a throw/catch Event.

The EventDefinition element inherits the attributes and model associations of BaseElement (see Table 8.5)
through its relationship to RootElement, but does not contain any additional attributes or model associations.
The ErrorEventDefinition, EscalationEventDefinition, and SignalEventDefinition subclasses
comprise of attributes to carry data. The data is defined as part of the Events package. The
MessageEventDefinition subclass comprises of an attribute that refers to a Message which is defined as part of
the Collaboration package.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Events> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#EventSub-Process>
  rdf:type owl:Class ;
  rdfs:comment """An Event Sub-Process is a specialized Sub-Process that is used within a Process (or Sub-Process). A SubProcess
is defined as an Event Sub-Process when its triggeredByEvent attribute is set to true.
An Event Sub-Process is not part of the normal flow of its parent Process—there are no incoming or outgoing
Sequence Flows.
 An Event Sub-Process MUST NOT have any incoming or outgoing Sequence Flows.
An Event Sub-Process MAY or MAY NOT occur while the parent Process is active, but it is possible that it will
occur many times. Unlike a standard Sub-Process, which uses the flow of the parent Process as a trigger, an Event
Sub-Process has a Start Event with a trigger. Each time the Start Event is triggered while the parent Process is
active, then the Event Sub-Process will start.
 The Start Event of an Event Sub-Process MUST have a defined trigger.
 The Start Event trigger (EventDefinition) MUST be from the following types: Message, Error,
Escalation, Compensation, Conditional, Signal, and Multiple (see page 260 for more details).
 An Event Sub-Process MUST have one and only one Start Event.
An Event Sub-Process object shares the same basic shape as the Sub-Process object, which is a rounded rectangle.
 An Event Sub-Process is a rounded corner rectangle that MUST be drawn with a single thin dotted line (see
 Figure 10.30 and Figure 10.31).
 The use of text, color, size, and lines for an Event Sub-Process MUST follow the rules defined in Section
“Use of Text, Color, Size, and Lines in a Diagram” on page 41 with the exception that:
 If the Event Sub-Process is collapsed, then its Start Event will be used as a marker in the upper left
 corner of the shape (see Figure 10.30).
There are two possible consequences to the parent Process when an Event Sub-Process is triggered: 1) the parent
Process can be interrupted, and 2) the parent Process can continue its work (not interrupted). This is determined by the
type of Start Event that is used. See page 242 for the list of interrupting and non-interrupting Event Sub-Process
Start Events.

Figure 10.32 provides an example of a Sub-Process that includes three Event Sub-Processes. The first Event SubProcess
is triggered by a Message, does not interrupt the Sub-Process, and can occur multiple times. The second
Event Sub-Process is used for compensation and will only occur after the Sub-Process has completed. The third
Event Sub-Process handles errors that occur while the Sub-Process is active and will stop (interrupt) the SubProcess
if triggered.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SubProcess> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Events>
  rdf:type owl:Class ;
  rdfs:comment """If any of the EventDefinitions for the Event is associated with an element that has an ItemDefinition (such as
a Message, Escalation, Error, or Signal), the following constraints apply:
• If the Event is associated with multiple EventDefinitions, there MUST be one Data Input (in the case of throw
Events) or one Data Output (in the case of catch Event) for each EventDefinition. The order of the
EventDefinitions and the order of the Data Inputs/Outputs determine which Data Input/Output
corresponds with which EventDefinition.
• For each EventDefinition and Data Input/Output pair, if the Data Input/Output is present, it MUST have an
ItemDefinition equivalent to the one defined by the Message, Escalation, Error, or Signal on the
associated EventDefinition. In the case of a throw Event, if the Data Input is not present, the Message,
Escalation, Error, or Signal will not be populated with data. In the case of a catch Event, if the Data Output
is not present, the payload within the Message, Escalation, Error, or Signal will not flow out of the Event
and into the Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BPMNExecutionSemantics> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExceptionFlow>
  rdf:type owl:Class ;
  rdfs:comment """Exception flow occurs outside the normal flow
of the Process and is based upon an
Intermediate Event attached to the boundary
of an Activity that occurs during the
performance of the Process (see page 287).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Exclusive>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventBasedGatewayType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExclusiveGateway>
  rdf:type owl:Class ;
  rdfs:comment """A diverging Exclusive Gateway (Decision) is used to create alternative paths within a Process flow. This is basically
the “diversion point in the road” for a Process. For a given instance of the Process, only one of the paths can be taken.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateway> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExpandedSub-Process>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SubProcess> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Expression>
  rdf:type owl:Class ;
  rdfs:comment """The Expression class is used to specify an Expression using natural-language text. These Expressions are not executable. The natural language text is captured using the documentation attribute, inherited from BaseElement.
Expression inherits the attributes and model associations of BaseElement (see Table 8.5), but adds no additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Extension>
  rdf:type owl:Class ;
  rdfs:comment "The Extension element binds/imports an ExtensionDefinition and its attributes to a BPMN model definition." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ExtensionDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#definition> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#mustUnderstand> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExtensionAttributeDefinition>
  rdf:type owl:Class ;
  rdfs:comment "The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isReference> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#type> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExtensionAttributeValue>
  rdf:type owl:Class ;
  rdfs:comment "The ExtensionAttributeValue contains the attribute value. This type is not applicable when the XML schema interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this requirement." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#value> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#valueRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#value> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#valueRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ExtensionAttributeDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#extensionAttributeDefinition> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ExtensionDefinition>
  rdf:type owl:Class ;
  rdfs:comment """The ExtensionDefinition class defines and groups additional attributes. This type is not applicable when the XML
schema interchange is used, since XSD Complex Types already satisfy this requirement.
Table 8.8 presents the attributes and model associations for the ExtensionDefinition element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ExtensionAttributeDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#extensionAttributeDefinitions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#FlowElement>
  rdf:type owl:Class ;
  rdfs:comment "FlowElement is the abstract super class for all elements that can appear in a Process flow, which are FlowNodes" ;
  rdfs:label "FlowElement"@de ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Auditing> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#auditing> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Monitoring> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#monitoring> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Auditing> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#auditing> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CategoryValue> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#categoryValueRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Monitoring> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#monitoring> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#FlowElementsContainer>
  rdf:type owl:Class ;
  rdfs:comment "FlowElementsContainer is an abstract super class for BPMN diagrams (or views) and defines the superset of elements that are contained in those diagrams." ;
  rdfs:label "FlowElementsContainer"@de ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#flowElements> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LaneSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#laneSets> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#FlowNode>
  rdf:type owl:Class ;
  rdfs:comment """The FlowNode element is used to provide a single element as the source and target Sequence Flow associations (see
Figure 8.35) instead of the individual associations of the elements that can connect to Sequence Flows (see the section
above). Only the Gateway, Activity, Choreography Activity, and Event elements can connect to Sequence Flows
and thus, these elements are the only ones that are sub-classes of FlowNode.
Since Gateway, Activity, Choreography Activity, and Event have their own attributes, model associations, and
inheritances; the FlowNode element does not inherit from any other BPMN element. Table 8.52 presents the additional
model associations of the FlowNode element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#incoming> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outgoing> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Font>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#FormalExpression>
  rdf:type owl:Class ;
  rdfs:comment "The FormalExpression class is used to specify an executable Expression using a specified Expression language. A natural-language description of the Expression can also be specified, in addition to the formal specification." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#language> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#language> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#body> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#evaluatesToTypeRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Forward>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Foundation>
  rdf:type owl:Class ;
  rdfs:comment "Foundation: The fundamental constructs needed for BPMN modeling" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Core> ;
.
<http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance>
  rdf:type owl:Class ;
  rdfs:comment """Elements and attributes not in the other sub-classes are contained in the full Process Modeling Conformance class.

The implementations claiming Process Modeling Conformance MUST support the following BPMN packages:
The BPMN core elements, which include those defined in the Infrastructure, Foundation, Common, and Service packages .
Process diagrams, which include the elements defined in the Process, Activities, Data, and Human Interaction packages.
Collaboration diagrams, which include Pools and Message Flow.
Conversation diagrams, which include Pools, Conversations, and Conversation Links.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CompleteConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Gateway>
  rdf:type owl:Class ;
  rdfs:comment """A Gateway is used to control the divergence and
convergence of Sequence Flows in a Process (see
page 145) and in a Choreography (see page 344).
Thus, it will determine branching, forking, merging,
and joining of paths. Internal markers will indicate
the type of behavior control.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateways> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#GatewayDirection> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#gatewayDirection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#GatewayDirection>
  rdf:type owl:Class ;
  rdfs:comment "An attribute that adds constraints on how the Gateway MAY be used." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateways> ;
  rdfs:subClassOf [
      rdf:type owl:Class ;
      owl:unionOf (
          <http://www.reiter.at/ontology/bpmn2.0#Converging>
          <http://www.reiter.at/ontology/bpmn2.0#Diverging>
          <http://www.reiter.at/ontology/bpmn2.0#Mixed>
          <http://www.reiter.at/ontology/bpmn2.0#Unspecified>
        ) ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Gateways>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalBusinessRuleTask>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GlobalTask> ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalChoreographyTask>
  rdf:type owl:Class ;
  rdfs:comment """A GlobalChoreographyTask is a reusable, atomic Choreography Task definition that can be called from within
any Choreography by a Call Choreography.
The GlobalChoreographyTask element inherits the attributes and model associations of Collaboration (see Table
9.1), through its relationship to Choreography. Table 11.5 presents the additional model associations of the
GlobalChoreographyTask element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Choreography> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#initiatingParticipantRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalConversation>
  rdf:type owl:Class ;
  rdfs:comment """A GlobalConversation is a reusable, atomic Conversation definition that can be called from within any
Collaboration by a Call Conversation.
The GlobalConversation element inherits the attributes and model associations and Collaboration (see Table 9.1),
but does not have any additional attributes or model associations.
A GlobalConversation is a restricted type of Collaboration, it is an “empty Collaboration.”
 A GlobalConversation MUST NOT contain any ConversationNodes.
Since a GlobalConversation does not have any Flow Elements, it does not require
MessageFlowAssociations, ParticipantAssociations, or ConversationAssociations or Artifacts.
It is basically a set of Participants, Message Flows, and CorrelationKeys intended for reuse. Also, the
Collaboration attribute choreographyRef is not applicable to GlobalConversation.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Conversations> ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalManualTask>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GlobalTask> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  owl:equivalentClass <http://www.reiter.at/ontology/bpmn2.0#ManualTask> ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalScriptTask>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GlobalTask> ;
  owl:equivalentClass <http://www.reiter.at/ontology/bpmn2.0#ScriptTask> ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalTask>
  rdf:type owl:Class ;
  rdfs:comment """A Global Task is a reusable, atomic Task definition that can be called from within any Process by a Call Activity.

The GlobalTask inherits the attributes and model associations of Callable Element (see Table 10.24). Table 10.26
presents the additional model associations of the GlobalTask.

There are different types of Tasks identified within BPMN to separate the types of inherent behavior that Tasks might
represent. The types of Global Tasks are only a subset of standard Tasks types. Only GlobalUserTask,
GlobalManualTask, GlobalScriptTask, and GlobalBusinessRuleTask are defined in BPMN. For the sake of
efficiency in this specification, the list of Task types is presented once on page 156. The behavior, attributes, and model
associations defined in that section also apply to the corresponding types of Global Tasks.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceRole> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resources> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#GlobalUserTask>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GlobalTask> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  owl:equivalentClass <http://www.reiter.at/ontology/bpmn2.0#UserTask> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Group>
  rdf:type owl:Class ;
  rdfs:comment """Group (a box around a
group of objects within
the same category)

A Group is a grouping of graphical elements that
are within the same Category (see page 70). This
type of grouping does not affect the Sequence
Flows within the Group. The Category name
appears on the diagram as the group label.
Categories can be used for documentation or
analysis purposes. Groups are one way in which
Categories of objects can be visually displayed on
the diagram.

The Group object is an Artifact that provides a visual mechanism to group elements of a diagram informally. The
grouping is tied to the CategoryValue supporting element. That is, a Group is a visual depiction of a single
CategoryValue. The graphical elements within the Group will be assigned the CategoryValue of the Group.
(Note -- CategoryValues can be highlighted through other mechanisms, such as color, as defined by a modeler or a
modeling tool).
 A Group is a rounded corner rectangle that MUST be drawn with a solid dashed line (as seen in Figure 8.13).

 The use of text, color, size, and lines for a Group MUST follow the rules defined in “Use of Text, Color, Size,
and Lines in a Diagram” on page 41.

Groups are often used to highlight certain sections of a Diagram without adding additional constraints for performance-
-as a Sub-Process would. The highlighted (grouped) section of the Diagram can be separated for reporting and analysis
purposes. Groups do not affect the flow of the Process.

The Group element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to Artifact. Table 8.21 presents the additional model associations for a Group""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CategoryValue> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#categoryValueRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CategoryValue> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#categoryValueRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#HumanInteraction>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#GlobalUserTask> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#userTask> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#UserTask> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#userTask> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#HumanPerformer>
  rdf:type owl:Class ;
  rdfs:comment """People can be assigned to Activities in various roles (called “generic human roles” in WS-HumanTask). BPMN 1.2
traditionally only has the Performer role. In addition to supporting the Performer role, BPMN 2.0 defines a specific
HumanPerformer element allowing specifying more specific human roles as specialization of HumanPerformer, such as
PotentialOwner.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Performer> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ImplicitThrowEvent>
  rdf:type owl:Class ;
  rdfs:comment """Implicit Throw Event
A sub-type of throw Event is the ImplicitThrowEvent. This is a non-graphical Event that is used for MultiInstance
Activities (see page 191). The ImplicitThrowEvent element inherits the attributes and model
associations of ThrowEvent (see Table 10.84), but does not have any additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ThrowEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Import>
  rdf:type owl:Class ;
  rdfs:comment """The Import class is used when referencing external element, either BPMN elements contained in other BPMN
Definitions or non-BPMN elements. Imports MUST be explicitly defined.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Infrastructure> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#location> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#location> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#importType> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#namespace> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#InclusiveGateway>
  rdf:type owl:Class ;
  rdfs:comment "A diverging Inclusive Gateway (Inclusive Decision) can be used to create alternative but also parallel paths within a Process flow. Unlike the Exclusive Gateway, all condition Expressions are evaluated. The true evaluation of one condition Expression does not exclude the evaluation of other condition Expressions. All Sequence Flows with a true evaluation will be traversed by a token. Since each path is considered to be independent, all combinations of the paths MAY be taken, from zero to all. However, it should be designed so that at least one path is taken." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateway> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#default> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Information>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemKind> ;
  owl:disjointWith <http://www.reiter.at/ontology/bpmn2.0#Physical> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Infrastructure>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Core> ;
.
<http://www.reiter.at/ontology/bpmn2.0#InputOutputBinding>
  rdf:type owl:Class ;
  rdfs:comment """When a CallableElement is exposed as a Service, it has to define one or more InputOutputBinding
elements. An InputOutputBinding element binds one Input and one Output of the
InputOutputSpecification to an Operation of a Service Interface. Table 10.25 presents the additional
model associations of the InputOutputBinding.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputDataRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputDataRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#InputOutputSpecification>
  rdf:type owl:Class ;
  rdfs:comment """Activities and Processes often need data in order to execute. In addition they can produce data during or as a result of execution. Data requirements are captured as Data Inputs and InputSets. Data that is produced is captured using Data Outputs and OutputSets. These elements are aggregated in a InputOutputSpecification class.

The InputOutputSpecification element inherits the attributes and model associations of BaseElement (see
Table 8.5). Figure 10.54 presents the additional attributes and model associations of the
InputOutputSpecification elemen""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataInputs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataOutputs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSets> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSets> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#InputSet>
  rdf:type owl:Class ;
  rdfs:comment """An InputSet is a collection of DataInput elements that together define a valid set of data inputs for an
InputOutputSpecification. An InputOutputSpecification MUST have at least one InputSet element.
An InputSet MAY reference zero or more DataInput elements. A single DataInput MAY be associated with
multiple InputSet elements, but it MUST always be referenced by at least one InputSet.
An “empty” InputSet, one that references no DataInput elements, signifies that the Activity requires no data to start
executing (this implies that either there are no data inputs or they are referenced by another input set).
InputSet elements are contained by InputOutputSpecification elements; the order in which these elements are
included defines the order in which they will be evaluated.
The InputSet element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 10.61
presents the additional attributes and model associations of the InputSet element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataInputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#optionalInputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#whileExecutingInputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#OutputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputSetRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#InteractionNode>
  rdf:type owl:Class ;
  rdfs:comment """The InteractionNode element is used to provide a single element as the source and target Message Flow
associations (see Figure 9.14, above) instead of the individual associations of the elements that can connect to Message
Flows (see the section above). Only the Pool/Participant, Activity, and Event elements can connect to Message
Flows. The InteractionNode element is also used to provide a single element for source and target of
Conversation Links, see page 132.
The InteractionNode element does not have any attributes or model associations and does not inherit from any other
BPMN element. Since Pools/Participants, Activities, and Events have their own attributes, model associations, and
inheritances, additional attributes and model associations for the InteractionNode element are not necessary""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Interface>
  rdf:type owl:Class ;
  rdfs:comment """An Interface defines a set of operations that are implemented by Services.
The Interface inherits the attributes and model associations of BaseElement (see Table 8.5) through its relationship
to RootElement. Table 8.65 presents the additional attributes and model associations of the Interface.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Service> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#callableElements> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#IntermediateCatchEvent>
  rdf:type owl:Class ;
  rdfs:comment """As the name implies, the Intermediate Event indicates where something happens (an Event) somewhere between the start and end of a Process.

An Intermediate Event that is placed within the normal flow of a Process can be used for one of two purposes. The Event can respond to (“catch”) the Event trigger or the Event can be used to set off (“throw”) the Event trigger.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CatchEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#IntermediateThrowEvent>
  rdf:type owl:Class ;
  rdfs:comment """As the name implies, the Intermediate Event indicates where something happens (an Event) somewhere between the start and end of a Process.

An Intermediate Event that is placed within the normal flow of a Process can be used for one of two purposes. The Event can respond to (“catch”) the Event trigger or the Event can be used to set off (“throw”) the Event trigger.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ThrowEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement>
  rdf:type owl:Class ;
  rdfs:comment """Several elements in BPMN are subject to store or convey items during process execution. These elements are referenced generally as “item-aware elements.” This is similar to the variable construct common to many languages. As with variables, these elements have an ItemDefinition.

The ItemAwareElement element inherits the attributes and model associations of BaseElement (see Table 8.5).
Table 10.51 presents the additional model associations of the ItemAwareElement element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataState> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataState> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#itemSubjectRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataState> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataState> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#itemSubjectRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ItemDefinition>
  rdf:type owl:Class ;
  rdfs:comment "An ItemDefinition element can specify an import reference where the proper definition of the structure is defined." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Import> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#import> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#structureRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Import> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#import> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemKind> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#itemKind> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isCollection> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ItemKind>
  rdf:type owl:Class ;
  rdfs:comment "The itemKind attribute specifies the nature of an item which can be a physical or an information item." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Class ;
      owl:unionOf (
          <http://www.reiter.at/ontology/bpmn2.0#Information>
          <http://www.reiter.at/ontology/bpmn2.0#Physical>
        ) ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Label>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#LabeledEdge>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#LabeledShape>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Lane>
  rdf:type owl:Class ;
  rdfs:comment """A Lane is a sub-partition within a Process,
sometimes within a Pool, and will extend the entire
length of the Process, either vertically or
horizontally (see on page 305). Lanes are used to
organize and categorize Activities.

 A Lane is a sub-partition within a Pool and will
extend the entire length of the Pool, either
vertically or horizontally (see on page 305).
Lanes are used to organize and categorize
Activities.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partitionElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partitionElementRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LaneSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#childLaneSet> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partitionElement> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partitionElementRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FlowNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#flowNodeRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LaneSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#childLaneSet> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#LaneSet>
  rdf:type owl:Class ;
  rdfs:comment """The LaneSet element defines the container for one or more Lanes. A Process can contain one or more LaneSets.
Each LaneSet and its Lanes can partition the Flow Nodes in a different way.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Lane> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#parentLane> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Lane> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#lanes> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Lane> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#parentLane> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Process> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#process> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#LinkEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """A Link Event is a mechanism for connecting two sections of a Process. Link Events can be used to create looping
situations or to avoid long Sequence Flow lines. The use of Link Events is limited to a single Process level (i.e.,
they cannot link a parent Process with a Sub-Process).
Figure 10.83 shows the variations of Link Events.
Figure 10.83 – Link Events
Paired Link Events can also be used as “Off-Page Connectors” for printing a Process across multiple pages. They can
also be used as generic “Go To” objects within the Process level. There can be multiple source Link Events, but there
can only be one target Link Event. When used to “catch” from the source Link, the Event marker will be unfilled (see
Figure 10.84: upper right). When used to “throw” to the target Link, the Event marker will be filled (see Figure 10.84:
upper: lower Left).

Since Process models often extend beyond the length of one printed page, there is often a concern about showing how
Sequence Flow connections extend across the page breaks. One solution that is often employed is the use of Off-Page
connectors to show where one page leaves off and the other begins. BPMN provides Intermediate Events of type Link
for use as Off-Page connectors (see Figure 10.84--Note that the figure shows two different printed pages, not two Pools
in one diagram). A pair of Link Events is used. One of the pair is shown at the end of one page. This Event is named
and has an incoming Sequence Flow and no outgoing Sequence Flows. The second Link Event is at the beginning
of the next page, shares the same name, and has an outgoing Sequence Flow and no incoming Sequence Flow.

Another way that Link Events can be used is as “Go To” objects. Functionally, they would work the same as for OffPage
Connectors (described above), except that they could be used anywhere in the diagram--on the same page or across
multiple pages. The general idea is that they provide a mechanism for reducing the length of Sequence Flow lines.
Some modelers can consider long lines as being hard to follow or trace. Go To Objects can be used to avoid very long 
Sequence Flows (see Figure 10.85 and Figure 10.86). Both diagrams will behave equivalently. For Figure 10.86, if the
“Order Rejected” path is taken from the Decision, then the token traversing the Sequence Flow would reach the source
Link Event and then “jump” to the target Link Event and continue down the Sequence Flow. The Process would
continue as if the Sequence Flow had directly connected the two objects.

Some methodologies prefer that all Sequence Flows only move in one direction; that is, forward in time. These
methodologies do not allow Sequence Flows to connect directly to upstream objects. Some consistency in modeling
can be gained by such a methodology, but situations that require looping become a challenge. Link Events can be used
to make upstream connections and create loops without violating the Sequence Flow direction restriction (see Figure
10.87).

The LinkEventDefinition element inherits the attributes and model associations of BaseElement (see Table 8.5)
through its relationship to the EventDefinition element (see page 260). Table 10.98 presents the additional attributes
of the LinkEventDefinition element.""" ;
  rdfs:comment "A Link Event is a mechanism for connecting two sections of a Process. Link Events can be used to create looping situations or to avoid long Sequence Flow lines. The use of Link Events is limited to a single Process level (i.e., they cannot link a parent Process with a Sub-Process)." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LinkEventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sources> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#LinkEventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#target> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#LoopActivity>
  rdf:type owl:Class ;
  rdfs:comment """The attributes of Tasks and Sub-Processes
will determine if they are repeated or
performed once (see page 190). There are
two types of loops: Standard and MultiInstance.
A small looping indicator will be
displayed at the bottom-center of the activity.

However, a Loop Activity does have additional instance
attributes as shown in Table 10.27.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Looping> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCounter> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#LoopActivityInstance>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCounter> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#LoopCharacteristics>
  rdf:type owl:Class ;
  rdfs:comment """Activities MAY be repeated sequentially, essentially behaving like a loop. The presence of LoopCharacteristics signifies that the Activity has looping behavior. LoopCharacteristics is an abstract class. Concrete subclasses define specific kinds of looping behavior.

The LoopCharacteristics element inherits the attributes and model associations of BaseElement (see Table 8.5),
but does not have any further attributes or model associations. However, a Loop Activity does have additional instance
attributes as shown in Table 10.27.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Looping>
  rdf:type owl:Class ;
  rdfs:comment """BPMN provides two mechanisms for looping
within a Process.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
.
<http://www.reiter.at/ontology/bpmn2.0#LoopingActivity>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ManualTask>
  rdf:type owl:Class ;
  rdfs:comment """Manual Task is a Task that is expected to be performed without the aid of any business process execution engine or
any application. An example of this could be a telephone technician installing a telephone at a customer location.
A Manual Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a hand figure
marker that distinguishes the shape from other Task types (as shown in Figure 10.17).
See “Manual Task” on page 165 within the larger section of “Human Interactions” for the details of Manual Tasks.

A Manual Task is a Task that is not managed by any business process engine. It can be considered as an unmanaged
Task, unmanaged in the sense of that the business process engine doesn’t track the start and completion of such a Task.
An example of this could be a paper based instruction for a telephone technician to install a telephone at a customer
location.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Message>
  rdf:type owl:Class ;
  rdfs:comment """A Message is used to depict the contents of a
communication between two Participants (as
defined by a business PartnerRole or a business
PartnerEntity—see on page 93).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#itemRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#itemRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#MessageEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that a Message is sent to a Participant at the
conclusion of the Process. See page 93 for more details on Messages.
The actual Participant from which the Message is received can be identified
by connecting the Event to a Participant using a Message Flow
within the definitional Collaboration of the Process – see Table 10.1.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#MessageEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """The MessageEventDefinition element inherits the attributes and model associations of BaseElement  through its relationship to the EventDefinition element


A Message arrives from a Participant and triggers the start of the
Process. See page 93 for more details on Messages.
If there is only one EventDefinition associated with the Start Event
and that EventDefinition is of the subclass MessageEventDefinition,
then the Event is a Message Start Event and MUST be displayed
with an envelope marker (see the figure to the right).
The actual Participant from which the Message is received can be identified
by connecting the Event to a Participant using a Message Flow
within the definitional Collaboration of the Process – see Table 10.1.

If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass MessageEventDefinition, then the
Event is a Message Start Event and uses an envelope marker (see the
figures to the right).
• For a Message Event Sub-Process that interrupts its containing Process,
the boundary of the Event is solid (see the upper figure to the right).
• For a Message Event Sub-Process that does not interrupt its containing
Process, the boundary of the Event is dashed (see the lower figure on the
right).
The actual Participant from which the Message is received can be identified by
connecting the Event to a Participant using a Message Flow w""" ;
  rdfs:comment """This type of End indicates that a Message is sent to a Participant at the
conclusion of the Process. See page 93 for more details on Messages.
The actual Participant from which the Message is received can be identified
by connecting the Event to a Participant using a Message Flow
within the definitional Collaboration of the Process – see Table 10.1""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#MessageFlow>
  rdf:type owl:Class ;
  rdfs:comment """A Message Flow is used to show the flow of
Messages between two Participants that are
prepared to send and receive them (see page
120). In BPMN, two separate Pools in a
Collaboration Diagram will represent the two
Participants (e.g., PartnerEntities and/or
PartnerRoles).

A Message Flow is used to show the flow of Messages between two Participants that are prepared to send and
receive them.
 A Message Flow MUST connect two separate Pools. They connect either to the Pool boundary or to Flow
 Objects within the Pool boundary. They MUST NOT connect two objects within the same Pool.
 A Message Flow is a line with an open circle line start and an open arrowhead line end that MUST be drawn with
 a dashed single line (see Figure 9.11).
 The use of text, color, size, and lines for a Message Flow MUST follow the rules defined in Section “Use of
 Text, Color, Size, and Lines in a Diagram” on page 41.
Figure 9.11 - A Message Flow
In Collaboration Diagrams (the view showing the Choreography Process Combined with Orchestration
Processes), a Message Flow can be extended to show the Message that is passed from one Participant to
another (see Figure 9.12).


If a Choreography is included in the Collaboration, then the Message Flow will “pass-through” a Choreography
Task as it connects from one Participant to another (see Figure 9.13).

Figure 9.14 displays the class diagram of a Message Flow and its relationships to other BPMN elements. When a
Message Flow is defined it is contained either within a Collaboration, a Choreography, or a
GlobalChoreographyTask.

The Message Flow element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 9.8
presents the additional attributes and model associations for the Message Flow element.

Message Flow Connections
See “Message Flow Connection Rules” on page 43 for the entire set of objects and how they MAY be sources or targets
of Message Flows.
Note – All Message Flows MUST connect two separate Pools. They MAY connect to the Pool boundary or to Flow
Objects within the Pool boundary. They MUST NOT connect two objects within the same Pool.
 An Activity MAY be the target of a Message Flow; it can have zero (0) or more incoming Message Flows.
 An Activity MAY be a source of a Message Flow; it can have zero (0) or more outgoing Message Flows""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InteractionNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InteractionNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#MessageFlowAssociation>
  rdf:type owl:Class ;
  rdfs:comment """These elements are used to do mapping between two elements that both contain Message Flows. The
MessageFlowAssociation provides the mechanism to match up the Message Flows.
A MessageFlowAssociation is used when an (outer) diagram with Message Flows contains an (inner) diagram
that also has Message Flows. It is used when:
• A Collaboration references a Choreography for inclusion between the Collaboration’s Pools (Participants).
The Message Flows of the Choreography (the inner diagram) need to be mapped to the Message Flows of the
Collaboration (the outer diagram).
• A Collaboration references a Conversation that contains Message Flows. The Message Flows of the
Conversation can serve as a partial requirement for the Collaboration. Thus, the Message Flows of the
Conversation (the inner diagram) need to be mapped to the Message Flows of the Collaboration (the outer
diagram).
• A Choreography references a Conversation that contains Message Flows. The Message Flows of the
Conversation can serve as a partial requirement for the Choreography. Thus, the Message Flows of the
Conversation (the inner diagram) need to be mapped to the Message Flows of the Choreography (the outer
diagram).
The MessageFlowAssociation element inherits the attributes and model associations of BaseElement (see Table
8.5). Table 9.9 presents the additional model associations for the MessageFlowAssociation element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#innerMessageFlowRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MessageFlow> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outerMessageFlowRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#MessageVisibleKind>
  rdf:type owl:Class ;
  rdfs:comment """MessageVisibleKind defines the type of envelope that is visible.
Description
MessageVisibleKind is applicable only to Participant Band and Message Flow.
For Message Flow, the envelope should be positioned in the middle of the edge.
For Participant Band, the envelope should be positioned over (for top band) or under (for bottom band) and connected to
the band using an association. Note that only Choreography Task Participant Bands are allowed to show the envelope.
Middle bands being only used for a SubChoreography can thus not have envelope showing.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Mixed>
  rdf:type owl:Class ;
  rdfs:comment "Mixed: This Gateway contains multiple outgoing and multiple incoming Sequence Flows." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GatewayDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Monitoring>
  rdf:type owl:Class ;
  rdfs:comment "The Monitoring and its model associations allow defining attributes related to monitoring. It leverages the BPMN extensibility mechanism. This element is used by FlowElements and Process. The actual definition of monitoring attributes is out of scope of this specification. BPMN 2.0 implementations can define their own set of attributes and their intended semantics." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Multi-InstanceActivityInstance>
  rdf:type owl:NamedIndividual ;
.
<http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior>
  rdf:type owl:Class ;
  rdfs:comment """MultiInstanceBehavior =
all { None | One | All | Complex }""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
.
<http://www.reiter.at/ontology/bpmn2.0#MultiInstanceLoopCharacteristics>
  rdf:type owl:Class ;
  rdfs:comment """The MultiInstanceLoopCharacteristics class allows for creation of a desired number of Activity instances.
The instances MAY execute in parallel or MAY be sequential. Either an Expression is used to specify or calculate the
desired number of instances or a data driven setup can be used. In that case a data input can be specified, which is able to
handle a collection of data. The number of items in the collection determines the number of Activity instances. This data
input can be produced by an input Data Association. The modeler can also configure this loop to control the tokens
produced.
 The marker for a Task or Sub-Process that is a multi-instance MUST be a set of three vertical lines.
 If the multi-instance instances are set to be performed in parallel rather than sequential (the isSequential
attribute set to false), then the lines of the marker will be vertical (see Figure 10.48).
 If the multi-instance instances are set to be performed in sequence rather than parallel (the isSequential
attribute set to true), then the marker will be horizontal (see Figure 10.49).
 The Multi-Instance marker MAY be used in combination with the Compensation marker.
The MultiInstanceLoopCharacteristics element inherits the attributes and model associations of
BaseElement (see Table 8.5), through its relationship to LoopCharacteristics. Table 10.29 presents the
additional attributes and model associations for the MultiInstanceLoopCharacteristics element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#LoopCharacteristics> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputDataItem> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputDataItem> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#noneBehaviorEventRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#oneBehaviorEventRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#completionCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCardinality> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopDataInputRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopDataOutputRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ComplexBehaviorDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#complexBehaviorDefinition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputDataItem> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outputDataItem> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#noneBehaviorEventRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#oneBehaviorEventRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#completionCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCardinality> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopDataInputRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopDataOutputRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#behavior> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isSequential> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#MultiInstanceParallel>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#MultiInstanceSequential>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#MultipleEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This means that there are multiple consequences of ending the Process.
All of them will occur (e.g., there might be multiple Messages sent).
There is no specific EventDefinition subclass (see page 260) for Multiple
End Events. If the End Event has more than one associated
EventDefiniton, then the Event will be displayed with the Multiple
Event marker (a pentagon—see the figure on the right).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#None>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#NoneAssociationDirection>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AssociationDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#NoneChoreographyLoopType>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#NoneEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """The None End Event does not have a defined result.
There is no specific EventDefinition subclass (see page 260) for None
End Events. If the End Event has no associated EventDefiniton,
then the Event will be displayed without a marker (see the figure on the
right).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#None_>
  rdf:type owl:Class ;
  rdfs:comment """None: the EventDefinition which is associated through the
noneEvent association will be thrown for each instance
completing.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior> ;
.
<http://www.reiter.at/ontology/bpmn2.0#NormalFlow>
  rdf:type owl:Class ;
  rdfs:comment """Normal flow refers to paths of Sequence Flow
that do not start from an Intermediate Event
attached to the boundary of an Activity.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#OneAssociationDirection>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AssociationDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Operation>
  rdf:type owl:Class ;
  rdfs:comment """An Operation defines Messages that are consumed and, optionally, produced when the Operation is called. It can
also define zero or more errors that are returned when operation fails. The Operation inherits the attributes and model
associations of BaseElement (see Table 8.5). Table 8.66 below presents the additional attributes and model associations
of the Operation""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Service> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outMessageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Error> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#errorRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outMessageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inMessageRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#OutputSet>
  rdf:type owl:Class ;
  rdfs:comment """An OutputSet is a collection of DataOutputs elements that together can be produced as output from an Activity or
Event. An InputOutputSpecification element MUST define at least OutputSet element. An OutputSet
MAY reference zero or more DataOutput elements. A single DataOutput MAY be associated with multiple
OutputSet elements, but it MUST always be referenced by at least one OutputSet

An “empty” OutputSet, one that is associated with no DataOutput elements, signifies that the ACTIVITY produces
no data.
The implementation of the element where the OutputSet is defined determines the OutputSet that will be produced.
So it is up to the Activity implementation or the Event, to define which OutputSet will be produced.

The OutputSet element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 10.62
presents the additional attributes and model associations of the OutputSet element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Data> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataOutputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#optionalOutputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataOutput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#whileExecutingOutputRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSetRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Parallel>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventBasedGatewayType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParallelGateway>
  rdf:type owl:Class ;
  rdfs:comment """A Parallel Gateway is used to synchronize (combine) parallel flows and to create parallel flows.

A Parallel Gateway creates parallel paths without checking any conditions; each outgoing Sequence Flow receives a token upon execution of this Gateway. For incoming flows, the Parallel Gateway will wait for all incoming flows before triggering the flow through its outgoing Sequence Flows.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Gateway> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParallelOrdering>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AdHocOrdering> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Participant>
  rdf:type owl:Class ;
  rdfs:comment """A Participant represents a specific PartnerEntity (e.g., a company) and/or a more general PartnerRole (e.g., a buyer, seller, or manufacturer) that are Participants in a Collaboration. A Participant is often responsible for the execution of the Process enclosed in a Pool; however, a Pool MAY be defined without a Process.

A Participant represents a specific PartnerEntity (e.g., a company) and/or a more general PartnerRole (e.g., a
buyer, seller, or manufacturer) that are Participants in a Collaboration. A Participant is often responsible for the
execution of the Process enclosed in a Pool; however, a Pool MAY be defined without a Process.
Figure 9.7 displays the class diagram of the Participant and its relationships to other BPMN elements. When Participants
are defined they are contained within a Collaboration, which includes the sub-types of Choreography,
GlobalConversation, or GlobalChoreographyTask.
The Participant element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 9.2
presents the additional attributes and model associations for the Participant element""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantMultiplicity> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Process> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#processRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EndPoint> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#endPointRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Interface> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#interfaceRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantMultiplicity> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#PartnerEntity> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partnerEntityRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#PartnerRole> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#partnerRoleRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Process> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#processRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParticipantAssociation>
  rdf:type owl:Class ;
  rdfs:comment """These elements are used to do mapping between two elements that both contain Participants. There are situations where
the Participants in different diagrams can be defined differently because they were developed independently, but
represent the same thing. The ParticipantAssociation provides the mechanism to match up the Participants.
A ParticipantAssociation is used when an (outer) diagram with Participants contains an (inner) diagram that
also has Participants. There are four usages of ParticipantAssociation. It is used when:
1. A Collaboration references a Choreography for inclusion between the Collaboration’s Pools (Participants).
The Participants of the Choreography (the inner diagram) need to be mapped to the Participants of the
Collaboration (the outer diagram).
2. A Call Conversation references a Collaboration or GlobalConversation. Thus, the Participants of the
Collaboration or GlobalConversation (the inner diagram) need to be mapped to the Participants referenced
by the Call Conversation (the outer element). Each Call Conversation contains its own set of
ParticipantAssociations.
3. A Call Choreography references a Choreography or GlobalChoreographyTask. Thus, the Participants
of the Choreography or GlobalChoreographyTask (the inner diagram) need to be mapped to the
Participants referenced by the Call Choreography (the outer element). Each Call Choreography contains its
own set of ParticipantAssociations.
4. A Call Activity within a Process that has a definitional Collaboration references another Process that also
has a definitional Collaboration. The Participants of the definitional Collaboration of the called Process (the
inner diagram) need to be mapped to the Participants of the definitional Collaboration of the calling Process (the
outer diagram).
A ParticipantAssociation can be owned by the outer diagram or one its elements. Figure 9.10 shows the class
diagram for the ParticipantAssociation element.
The ParticipantAssociation element inherits the attributes and model associations of BaseElement (see Table
8.5). Table 9.7 presents the additional model associations for the ParticipantAssociation element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#innerParticipantRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#outerParticipantRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind>
  rdf:type owl:Class ;
  rdfs:comment """12.2.3.4 ParticipantBandKind [Enumeration]
ParticipantBandKind defines the type of Participant Band to depict.
Description
Participant bands can be depicted in 3 ways:
1. a top band is rectangular with rounded corners at the top
2. a middle band is rectangular
3. a bottom band is rectangular with rounded corners at the bottom
Participant bands can be depicted in 2 shadings:
1. initiating (the band should not be shaded)
2. non_initiating (the band should be shaded)
Abstract Syntax
• Figure 12.3 - BPMN Shape""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicity>
  rdf:type owl:Class ;
  rdfs:comment """ParticipantMultiplicity is used to define the multiplicity of a Participant.
For example, a manufacturer can request a quote from multiple suppliers in a Collaboration.

The multi-instance marker will be displayed in bottom center of the Pool (Participant - see Figure 9.9, above), or the
Participant Band of a Choreography Activity (see page 321), when the ParticipantMultiplicity is
associated with the Participant, and the maximum attribute is either not set, or has a value of two or more.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CollaborationPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#maximum> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#minimum> ;
      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicityInstanceAttributes>
  rdf:type <http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicity> ;
  rdf:type owl:Class ;
  rdf:type owl:NamedIndividual ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantMultiplicity> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#numParticipants> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#numParticipants> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#PartnerEntity>
  rdf:type owl:Class ;
  rdfs:comment """A PartnerEntity is one of the possible types of Participant (see the section above).
The PartnerEntity element inherits the attributes and model associations of BaseElement (see Figure 8.5). Table
9.3 presents the additional attributes and model associations for the PartnerEntity element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#PartnerRole>
  rdf:type owl:Class ;
  rdfs:comment """A PartnerRole is one of the possible types of Participant (see the section above).
The PartnerRole element inherits the attributes and model associations of BaseElement (see Figure 8.5). Table 9.4
presents the additional attributes and model associations for the PartnerRole element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Common> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participantRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Performer>
  rdf:type owl:Class ;
  rdfs:comment """The Performer class defines the resource that will perform or will be responsible for an Activity. The performer can
be specified in the form of a specific individual, a group, an organization role or position, or an organization.
The Performer element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to ResourceRole, but does not have any additional attributes or model associations.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ResourceRole> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Physical>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Plane>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#PotentialOwner>
  rdf:type owl:Class ;
  rdfs:comment """People can be assigned to Activities in various roles (called “generic human roles” in WS-HumanTask). BPMN 1.2
traditionally only has the Performer role. In addition to supporting the Performer role, BPMN 2.0 defines a specific
HumanPerformer element allowing specifying more specific human roles as specialization of HumanPerformer, such as
PotentialOwner.

Potential Owners
Potential owners of a User Task are persons who can claim and work on it. A potential owner becomes the actual owner
of a Task, usually by explicitly claiming it.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ResourceRole> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Private>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Process>
  rdf:type owl:Class ;
  rdfs:comment """A Process describes a sequence or flow of Activities in an organization with the objective of carrying out work. In
BPMN a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and
Sequence Flows that define finite execution semantics (see Figure 10.1). Processes can be defined at any level from
enterprise-wide Processes to Processes performed by a single person. Low-level Processes can be grouped
together to achieve a common business goal.

Note that BPMN uses the term Process specifically to mean a set of flow elements. It uses the terms Collaboration and
Choreography when modeling the interaction between Processes.
The Process package contains classes that are used for modeling the flow of Activities, Events, and Gateways, and
how they are sequenced within a Process (see Figure 10.2). When a Process is defined it is contained within
Definitions.

A Process is a CallableElement, allowing it to be referenced and reused by other Processes via the Call Activity
construct. In this capacity, a Process MAY reference a set of Interfaces that define its external behavior.
A Process is a reusable element and can be imported and used within other Definitions.
Figure 10.3 shows the details of the attributes and model associations of a Process

The Process element inherits the attributes and model associations of CallableElement (see Table 10.24) and of
FlowElementContainer (see Table 8.45).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CallableElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElementsContainer> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Auditing> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#auditing> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#definitionalCollaborationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Monitoring> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#monitoring> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#artifacts> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Auditing> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#auditing> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Collaboration> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#definitionalCollaborationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#CorrelationSubscription> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#correlationSubscriptions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Monitoring> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#monitoring> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Participant> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#participant> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Process> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#supports> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Property> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#properties> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceRole> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resources> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ProcessType> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#processType> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isClosed> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isExecutable> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ProcessExecutionConformance>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CompleteConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ProcessInstance>
  rdf:type <http://www.reiter.at/ontology/bpmn2.0#Process> ;
  rdf:type owl:Class ;
  rdf:type owl:NamedIndividual ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#state> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ProcessPackage>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ClassDiagramStructure> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FullProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ProcessType>
  rdf:type owl:Class ;
  rdfs:comment "Default is none." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessPackage> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Property>
  rdf:type owl:Class ;
  rdfs:comment """Properties, like Data Objects, are item-aware elements. But, unlike Data Objects, they are not visually displayed on a
Process diagram. Certain flow elements MAY contain properties, in particular only Processes, Activities, and
Events MAY contain Properties.
The Property class is a DataElement element that acts as a container for data associated with flow elements.
Property elements MUST be contained within a FlowElement. Property elements are not visually displayed on a
Process diagram.

The Property element inherits the attributes and model associations of ItemAwareElement (Table 10.51). Table
10.54 presents the additional attributes of the Property element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemAwareElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Public>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ReadMe>
  rdf:type owl:Class ;
  rdfs:comment """Duplikates

In order to produce an ontologie of BPMN2.0 it was neccesary to rename terms which occure more than once with different meanings. 

None
RelationshipDirection (None)
ProcessType (none)

Parallel
EventGatewayType (Parallel)
ParallelOrdering (AdHocOrdering)""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#ReceiveTask>
  rdf:type owl:Class ;
  rdfs:comment """A Receive Task is a simple Task that is designed to wait for a Message to arrive from an external Participant
(relative to the Process). Once the Message has been received, the Task is completed.
The actual Participant from which the Message is received can be identified by connecting the Receive Task to a
Participant using a Message Flows within the definitional Collaboration of the Process – see Table 10.1.
A Receive Task is often used to start a Process. In a sense, the Process is bootstrapped by the receipt of the
Message. In order for the Receive Task to instantiate the Process its instantiate attribute MUST be set to true
and it MUST NOT have any incoming Sequence Flow.
A Receive Task object shares the same shape as the Task, which is a rectangle that has rounded corners. However, there
is an unfilled envelope marker (the same marker as a catch Message Event) in the upper left corner of the shape that
indicates that the Task is a Receive Task.
A Receive Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes an unfilled
envelope marker that distinguishes the shape from other Task types (as shown in Figure 10.15). If the instantiate
attribute is set to true, the envelope marker looks like a Message Start Event (as shown in Figure 10.16).

The Receive Task inherits the attributes and model associations of Activity (see Table 10.3). In addition the following
constraints apply when the Receive Task references a Message: The Receive Task has at most one outputSet and
at most one Data output. If the Data output is present, it MUST have an ItemDefinition equivalent to the one
defined by the associated Message. At execution time, when the Receive Task is executed, the data automatically
moves from the Message to the Data Output on the Receive Task. If the Data Output is not present, the payload
within the Message will not flow out of the Receive Task and into the Process.
Table 10.10 presents the additional attributes and model associations of the Receive Task.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#instantiate> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Relationship>
  rdf:type owl:Class ;
  rdfs:comment "The ‘identity/relationship’ model it is reduced to the creation of families of typed relationships that enable BPMN and non-BPMN Artifacts to be related in non intrusive manner." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sources> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Element> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targets> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#direction> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#type> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#RelationshipDirection>
  rdf:type owl:Class ;
  rdfs:comment "This attribute specifies the direction of the relationship." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Foundation> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Rendering>
  rdf:type owl:Class ;
  rdfs:comment """Rendering of User Tasks
BPMN User Tasks need to be rendered on user interfaces like forms clients, portlets, etc. The Rendering element
provides an extensible mechanism for specifying UI renderings for User Tasks (Task UI). The element is optional. One
or more rendering methods can be provided in a Task definition. A User Task can be deployed on any compliant
implementation, irrespective of the fact whether the implementation supports specified rendering methods or not. The
Rendering element is the extension point for renderings. Things like language considerations are opaque for the
Rendering element because the rendering applications typically provide Multilanguage support. Where this is not the
case, providers of certain rendering types can decide to extend the rendering type in order to provide language
information for a given rendering. The content of the rendering element is not defined by this specification.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Resource>
  rdf:type owl:Class ;
  rdfs:comment """The Resource class is used to specify resources that can be referenced by Activities. These Resources can be
Human Resources as well as any other resource assigned to Activities during Process execution time.

The definition of a Resource is “abstract,” because it only defines the Resource, without detailing how e.g., actual
user IDs are associated at runtime. Multiple Activities can utilize the same Resource.

Every Resource can define a set of ResourceParameters. These parameters can be used at runtime to define query e.g., into an Organizational Directory. Every Activity referencing a parameterized Resource can bind values available in the scope of the Activity to these parameters.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceParameter> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceParameters> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ResourceAssignmentExpression>
  rdf:type owl:Class ;
  rdfs:comment """Expression Assignment
Resources can be assigned to an Activity using Expressions. These Expressions MUST return Resource
entity related data types, like Users or Groups. Different Expressions can return multiple Resources. All of them
are assigned to the respective subclass of the ResourceRole element, for example as potential owners. The semantics
is defined by the subclass.
The ResourceAssignmentExpression element inherits the attributes and model associations of BaseElement
(see Table 8.5). Table 10.6 presents the additional model associations of the ResourceAssignmentExpression
element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#expression> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ResourceParameter>
  rdf:type owl:Class ;
  rdfs:comment "The ResourceParameter element inherits the attributes and model associations of BaseElement (see Table 8.5) through its relationship to RootElement. Table 8.51 presents the additional model associations for the ResourceParameter element." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#RootElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#type> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isRequired> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#name> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ResourceParameterBinding>
  rdf:type owl:Class ;
  rdfs:comment """Parameterized Resource Assignment
Resources support query parameters that are passed to the Resource query at runtime. Parameters MAY refer to
Task instance data using Expressions. During Resource query execution, an infrastructure can decide which of the
Parameters defined by the Resource are used. It MAY use zero (0) or more of the Parameters specified. It MAY
also override certain Parameters with values defined during Resource deployment. The deployment mechanism for
Tasks and Resources is out of scope for this specification. Resource queries are evaluated to determine the set of
Resources, e.g., people, assigned to the Activity. Failed Resource queries are treated like Resource queries that
return an empty result set. Resource queries return one Resource or a set of Resources.
The ResourceParameterBinding element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 10.7 presents the additional model associations of the ResourceParameterBinding element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#expression> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceParameter> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#parameterRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ResourceRole>
  rdf:type owl:Class ;
  rdfs:comment """The ResourceRole element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
10.5 presents the additional model associations of the ResourceRole element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Resource> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceAssignmentExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceAssignmentExpression> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Resource> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceAssignmentExpression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceAssignmentExpression> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ResourceParameterBinding> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#resourceParameterBindings> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ReusableSub-Process>
  rdf:type owl:Class ;
  rdfs:comment """The reusable Sub-Process of BPMN 1.2 corresponds to the Call Activity that calls a pre-defined Process. See details
of a Call Activity on page 183.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SubProcess> ;
.
<http://www.reiter.at/ontology/bpmn2.0#RootElement>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ScriptTask>
  rdf:type owl:Class ;
  rdfs:comment """A Script Task is executed by a business process engine. The modeler or implementer defines a script in a language that
the engine can interpret. When the Task is ready to start, the engine will execute the script. When the script is completed,
the Task will also be completed.
A Script Task object shares the same shape as the Task, which is a rectangle that has rounded corners. However, there
is a graphical marker in the upper left corner of the shape that indicates that the Task is a Script Task (see Figure
10.11).
A Script Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a marker that
distinguishes the shape from other Task types (as shown in Figure 10.20).
The Script Task inherits the attributes and model associations of Activity (see Table 10.3). Table 10.12 presents the
additional attributes of the Script Task.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#script> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#scriptFormat> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#script> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#scriptFormat> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#SendTask>
  rdf:type owl:Class ;
  rdfs:comment """A Send Task is a simple Task that is designed to send a Message to an external Participant (relative to the
Process). Once the Message has been sent, the Task is completed.
The actual Participant which the Message is sent can be identified by connecting the Send Task to a Participant using
a Message Flows within the definitional Collaboration of the Process – see Table 10.1.
A Send Task object shares the same shape as the Task, which is a rectangle that has rounded corners. However, there is
a filled envelope marker (the same marker as a throw Message Event) in the upper left corner of the shape that
indicates that the Task is a Send Task.

A Send Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a filled envelope
marker that distinguishes the shape from other Task types (as shown in Figure 10.13).

The Send Task inherits the attributes and model associations of Activity (see Table 10.3). In addition the following
constraints apply when the Send Task references a Message: The Send Task has at most one inputSet and one
Data Input. If the Data Input is present, it MUST have an ItemDefinition equivalent to the one defined by the
associated Message. At execution time, when the Send Task is executed, the data automatically moves from the Data
Input on the Send Task into the Message to be sent. If the Data Input is not present, the Message will not be
populated with data from the Process.
Table 10.9 presents the additional model associations of the Send Task.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Message> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#messageRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#SequenceFlow>
  rdf:type owl:Class ;
  rdfs:comment """A Sequence Flow is used to show the order that
Activities will be performed in a Process (see page
97) and in a Choreography (see page 320).

See “Sequence Flow Connections Rules” on page 42 for the entire set of objects and how they MAY be sources or targets
of Sequence Flows.
 An Activity MAY be a target for Sequence Flows; it can have multiple incoming Sequence Flows. Incoming
Sequence Flows MAY be from an alternative path and/or parallel paths.
 If the Activity does not have an incoming Sequence Flow, then the Activity MUST be instantiated when the
Process is instantiated.
 There are two exceptions to this: Compensation Activities and Event Sub-Processes.
Note – If the Activity has multiple incoming Sequence Flows, then this is considered uncontrolled flow. This means that
when a token arrives from one of the Paths, the Activity will be instantiated. It will not wait for the arrival of tokens from the
other paths. If another token arrives from the same path or another path, then a separate instance of the Activity will be
created. If the flow needs to be controlled, then the flow should converge on a Gateway that precedes the Activities (see
“Gateways” on page 287 for more information on Gateways).
 An Activity MAY be a source for Sequence Flows; it can have multiple outgoing Sequence Flows. If there
are multiple outgoing Sequence Flows, then this means that a separate parallel path is being created for each
Sequence Flow (i.e., tokens will be generated for each outgoing Sequence Flow from the Activity).
 If the Activity does not have an outgoing Sequence Flow, then the Activity marks the end of one or more
 paths in the Process. When the Activity ends and there are no other parallel paths active, then the Process
 MUST be completed.
 There are two exceptions to this: Compensation Activities and Event Sub-Processes.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElement> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conditionExpression> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conditionExpression> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FlowNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#sourceRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#FlowNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#targetRef> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isImmediate> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Sequence_Flow_Looping>
  rdf:type owl:Class ;
  rdfs:comment """Loops can be created by connecting a
Sequence Flow to an “upstream” object. An
object is considered to be upstream if that
object has an outgoing Sequence Flow that
leads to a series of other Sequence Flows,
the last of which is an incoming Sequence
Flow for the original object.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Looping> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Sequential>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AdHocOrdering> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Service>
  rdf:type owl:Class ;
  rdfs:comment """Service: The fundamental constructs needed for modeling services and interfaces.
3. Common: Those classes which are common to the layers of Process, Choreography,""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Core> ;
.
<http://www.reiter.at/ontology/bpmn2.0#ServiceTask>
  rdf:type owl:Class ;
  rdfs:comment """A Service Task is a Task that uses some sort of service, which could be a Web service or an automated application.
A Service Task object shares the same shape as the Task, which is a rectangle that has rounded corners. However, there
is a graphical marker in the upper left corner of the shape that indicates that the Task is a Service Task (see Figure
10.11).
A Service Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a marker that
distinguishes the shape from other Task types (as shown in Figure 10.11).

The Service Task inherits the attributes and model associations of Activity (see Table 10.3). In addition the following
constraints are introduced when the Service Task references an Operation: The Service Task has exactly one
inputSet and at most one outputSet. It has a single Data Input with an ItemDefinition equivalent to the one
defined by the Message referenced by the inMessageRef attribute of the associated Operation. If the
Operation defines output Messages, the Service Task has a single Data Output that has an ItemDefinition
equivalent to the one defined by the Message referenced by the outMessageRef attribute of the associated
Operation.
The actual Participant whose service is used can be identified by connecting the Service Task to a Participant using a
Message Flows within the definitional Collaboration of the Process – see Table 10.1.

The Service Task inherits the attributes and model associations of Activity (see Table 10.3). Table 10.8 presents
additional the model associations of the Service Task.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Operation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#operationRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Signal>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Events> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ItemDefinition> ;
.
<http://www.reiter.at/ontology/bpmn2.0#SignalEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that a Signal will be broadcasted when the
End has been reached. Note that the Signal, which is broadcast to any
Process that can receive the Signal, can be sent across Process levels
or Pools, but is not a Message (that has a specific source and target).
The attributes of a Signal can be found on page 273.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#AnalyticProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#SignalEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass SignalEventDefinition, then the
Event is a Signal Start Event and uses an triangle marker (see the figures to
the right).
For a Signal Event Sub-Process that interrupts its containing Process, then the
boundary of the Event is solid (see the upper figure to the right).
For a Signal Event Sub-Process that does not interrupt its containing Process,
the boundary of the Event is dashed (see the lower figure on the right).""" ;
  rdfs:comment """The SignalEventDefinition element inherits the attributes and model associations of BaseElement through its relationship to the EventDefinition element

A Signal arrives that has been broadcast from another Process and
triggers the start of the Process. Note that the Signal is not a Message,
which has a specific target for the Message. Multiple Processes can
have Start Events that are triggered from the same broadcasted Signal.
If there is only one EventDefinition associated with the Start Event
and that EventDefinition is of the subclass SignalEventDefinition,
then the Event is a Signal Start Event and MUST be""" ;
  rdfs:comment """This type of End indicates that a Signal will be broadcasted when the
End has been reached. Note that the Signal, which is broadcast to any
Process that can receive the Signal, can be sent across Process levels
or Pools, but is not a Message (that has a specific source and target).
The attributes of a Signal can be found on page 273.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Signal> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#signalRef> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Signal> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#signalRef> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Standard>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyLoopType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#StandardLoopCharacteristics>
  rdf:type owl:Class ;
  rdfs:comment """The StandardLoopCharacteristics class defines looping behavior based on a boolean condition. The Activity
will loop as long as the boolean condition is true. The condition is evaluated for every loop iteration, and MAY be
evaluated at the beginning or at the end of the iteration. In addition, a numeric cap can be optionally specified. The
number of iterations MAY NOT exceed this cap.
 The marker for a Task or a Sub-Process that is a standard loop MUST be a small line with an arrowhead that curls
 back upon itself (see Figure 10.46 and Figure 10.47).
 The loop Marker MAY be used in combination with the Compensation Marker.

The StandardLoopCharacteristics element inherits the attributes and model associations of BaseElement (see
Figure 8.5), through its relationship to LoopCharacteristics. Table 10.28 presents the additional attributes and
model associations for the StandardLoopCharacteristics element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#LoopCharacteristics> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopMaximum> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopCondition> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#loopMaximum> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#testBefore> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#StartEvent>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CatchEvent> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#isInterrupting> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Style>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DI-meta-model> ;
.
<http://www.reiter.at/ontology/bpmn2.0#SubChoreography>
  rdf:type owl:Class ;
  rdfs:comment """A Sub-Choreography is a compound Activity in that it has detail that is defined as a flow of other Activities, in this
case, a Choreography. Each Sub-Choreography involves two or more Participants. The name of the SubChoreography
and each of the Participants are all displayed in the different bands that make up the shape’s graphical
notation. There are two or more Participant Bands and one Sub-Process Name Band.""" ;
  rdfs:comment """The Sub-Choreography element inherits the attributes and model associations of Choreography Activity (see Table
11.1) and FlowElementsContainer (see Table 8.45). Table 11.3 presents the additional model associations of the
GlobalChoreographyTask element:""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ChoreographyActivity> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElementsContainer> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#artifacts> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#SubConversation>
  rdf:type owl:Class ;
  rdfs:comment """A Sub-Conversation is a ConversationNode that is a hierarchical division within the parent Collaboration. A
Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel
details of the Conversation, which consist of Message Flows, Conversations, and/or other SubConversations.
The Sub-Conversation shares the Participants of its parent Conversation.
 A Sub-Conversation is a hexagon that MUST be drawn with a single thin line (see Figure 9.24).
 The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be
 positioned at the bottom center of the shape.
The Sub-Conversation element inherits the attributes and model associations of ConversationNode (see Table
9.10). Table 9.11 presents the additional model associations for the Sub-Conversation element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#ConversationNode> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#conversationNodes> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#SubProcess>
  rdf:type owl:Class ;
  rdfs:comment """A Sub-Process is an Activity whose internal details have been modeled using Activities, Gateways, Events, and Sequence Flows. A Sub-Process is a graphical object within a Process, but it also can be “opened up” to show a lower-level Process. Sub-Processes define a contextual scope that can be used for attribute visibility, transactional scope, for the handling of exceptions (see page 275 for more details), of Events, or for compensation (see page 302 for more details).

The Sub-Process element inherits the attributes and model associations of Activity (see Table 10.3) and of
FlowElementContainer (see Table 8.45). Table 10.3 presents the additional attributes of the Sub-Process element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#FlowElementsContainer> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#artifacts> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#triggeredByEvent> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Task>
  rdf:type owl:Class ;
  rdfs:comment """A Task is an atomic Activity that is included
within a Process (see page 156). A Task is
used when the work in the Process is not
broken down to a finer level of Process detail.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activity> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
.
<http://www.reiter.at/ontology/bpmn2.0#TerminateEndEvent>
  rdf:type owl:Class ;
  rdfs:comment """This type of End indicates that all Activities in the Process should be
immediately ended. This includes all instances of multi-instances. The
Process is ended without compensation or event handling""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EndEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#TerminateEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """The TerminateEventDefinition element inherits the attributes and model associations of BaseElement (see
Table 8.5) through its relationship to the EventDefinition element (see page 260).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
.
<http://www.reiter.at/ontology/bpmn2.0#TextAnnotation>
  rdf:type owl:Class ;
  rdfs:comment """Text Annotation
(attached with an
Association)

Text Annotations are a mechanism for a modeler to
provide additional text information for the reader of
a BPMN Diagram (see page 71).

Text Annotations are a mechanism for a modeler to provide additional information for the reader of a BPMN Diagram.
 A Text Annotation is an open rectangle that MUST be drawn with a solid single line (as seen in Figure 8.16).
 The use of text, color, size, and lines for a Text Annotation MUST follow the rules defined in “Use of Text,
Color, Size, and Lines in a Diagram” on page 41.
The Text Annotation object can be connected to a specific object on the Diagram with an Association, but does not
affect the flow of the Process. Text associated with the Annotation can be placed within the bounds of the open
rectangle.
Figure 8.16 - A Text Annotation
The Text Annotation element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.24 presents the additional attributes for a Text Annotation.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Artifact> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#text> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#textFormat> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#ThrowEvent>
  rdf:type owl:Class ;
  rdfs:comment """The ThrowEvent element inherits the attributes and model associations of Event element

The ThrowEvent element inherits the attributes and model associations of Event element (see Table 10.81). Table
10.83 presents the additional attributes and model associations of the ThrowEvent element.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Event> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSets> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInput> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataInputs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#DataInputAssociation> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#dataInputAssociations> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#eventDefinitionRefs> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#eventDefinitions> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#InputSet> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#inputSets> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#Throwing_message_Intermediate_Event>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#IntermediateThrowEvent> ;
.
<http://www.reiter.at/ontology/bpmn2.0#TimerEventDefinition>
  rdf:type owl:Class ;
  rdfs:comment """The TimerEventDefinition element inherits the attributes and model associations of BaseElement through its relationship to the EventDefinition element


A specific time-date or a specific cycle (e.g., every Monday at 9am) can
be set that will trigger the start of the Process.
If there is only one EventDefinition associated with the Start Event
and that EventDefinition is of the subclass TimerEventDefinition,
then the Event is a Timer Start Event and MUST be displayed with
a clock marker (see the figure to the right).

If there is only one EventDefinition associated with the Start Event and that
EventDefinition is of the subclass TimerEventDefinition, then the
Event is a Timer Start Event and uses a clock marker (see the figures to the
right).
• For a Timer Event Sub-Process that interrupts its containing Process,
the boundary of the Event is solid (see the upper figure to the right).
• For a Timer Event Sub-Process that does not interrupt its containing
Process, the boundary of the Event is dashed (see the lower figure on the
right).""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#EventDefinition> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeCycle> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeDate> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeDuration> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeCycle> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeDate> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Expression> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#timeDuration> ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#TransactionSub-Process>
  rdf:type owl:Class ;
  rdfs:comment """A transaction is a Sub-Process that is
supported by a special protocol that insures
that all parties involved have complete
agreement that the activity should be
completed or cancelled (see page 178). The
attributes of the activity will determine if the
activity is a transaction. A double-lined
boundary indicates that the Sub-Process is a
Transaction.

A Transaction is a specialized type of Sub-Process that will have a special behavior that is controlled through a
transaction protocol (such as WS-Transaction). The boundary of the Sub-Process will be double-lined to indicate that it
is a Transaction (see Figure 10.33).

 A Transaction Sub-Process is a rounded corner rectangle that MUST be drawn with a double thin line.
 The use of text, color, size, and lines for a transaction Sub-Process MUST follow the rules defined in
 Section “Use of Text, Color, Size, and Lines in a Diagram” on page 41.

The Transaction Sub-Process element inherits the attributes and model associations of Activities (see Table 10.3)
through its relationship to Sub-Process. Table 10.21 presents the additional attributes and model associations of the
Transaction Sub-Process.

There are three basic outcomes of a Transaction: Successful Completion, Failed Completion, Hazard

There are three basic outcomes of a Transaction:
1. Successful completion: this will be shown as a normal Sequence Flow that leaves the Transaction SubProcess.
2. Failed completion (Cancel): When a Transaction is cancelled, the Activities inside the Transaction will be
subjected to the cancellation actions, which could include rolling back the Process and compensation (see page 302
for more information on compensation) for specific Activities. Note that other mechanisms for interrupting a
Transaction Sub-Process will not cause compensation (e.g., Error, Timer, and anything for a non-Transaction
Activity). A Cancel Intermediate Event, attached to the boundary of the Activity, will direct the flow after the
Transaction has been rolled back and all compensation has been completed. The Cancel Intermediate Event
can only be used when attached to the boundary of a Transaction Sub-Process. It cannot be used in any normal
flow and cannot be attached to a non-Transaction Sub-Process. There are two mechanisms that can signal the
cancellation of a Transaction:
• A Cancel End Event is reached within the transaction Sub-Process. A Cancel End Event can only
be used within a transaction Sub-Process.
• A cancel Message can be received via the transaction protocol that is supporting the execution of the
Transaction Sub-Process.
3. Hazard: This means that something went terribly wrong and that a normal success or cancel is not possible. Error
Intermediate Events are used to show Hazards. When a Hazard happens, the Activity is interrupted (without
compensation) and the flow will continue from the Error Intermediate Event.
The behavior at the end of a successful Transaction Sub-Process is slightly different than that of a normal SubProcess.
When each path of the Transaction Sub-Process reaches a non-Cancel End Event(s), the flow does not
immediately move back up to the higher-level parent Process, as does a normal Sub-Process. First, the transaction
protocol needs to verify that all the Participants have successfully completed their end of the Transaction. Most of the
time this will be true and the flow will then move up to the higher-level Process. But it is possible that one of the
Participants can end up with a problem that causes a Cancel or a Hazard. In this case, the flow will then move to the
appropriate Intermediate Event, even though it had apparently finished successfully.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SubProcess> ;
.
<http://www.reiter.at/ontology/bpmn2.0#UnconditionalFlow>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#UncontrolledFlow>
  rdf:type owl:Class ;
  rdfs:comment """Uncontrolled flow refers to flow that is not
affected by any conditions or does not pass
through a Gateway. The simplest example of
this is a single Sequence Flow connecting two
Activities. This can also apply to multiple
Sequence Flows that converge to or diverge
from an Activity. For each uncontrolled
Sequence Flows a token will flow from the
source object through the Sequence Flows
to the target object.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#SequenceFlow> ;
.
<http://www.reiter.at/ontology/bpmn2.0#Unspecified>
  rdf:type owl:Class ;
  rdfs:comment "Unspecified: There are no constraints. The Gateway MAY have any number of incoming and outgoing Sequence Flows." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#GatewayDirection> ;
.
<http://www.reiter.at/ontology/bpmn2.0#UserTask>
  rdf:type owl:Class ;
  rdfs:comment """A User Task is a typical “workflow” Task where a human performer performs the Task with the assistance of a
software application and is scheduled through a task list manager of some sort.
A User Task is a rounded corner rectangle that MUST be drawn with a single thin line and includes a human figure
marker that distinguishes the shape from other Task types (as shown in Figure 10.17).
See “User Task” on page 163 within the larger section of “Human Interactions” for the details of User Tasks.

The User Task inherits the attributes and model associations of Activity (see Table 10.3), but does not have any
additional attributes or model associations.
User Task
A User Task is a typical “workflow” Task where a human performer performs the Task with the assistance of a
software application. The lifecycle of the Task is managed by a software component (called task manager) and is
typically executed in the context of a Process.

The User Task can be implemented using different technologies, specified by the implementation attribute. Besides
the Web service technology, any technology can be used. A User Task for instance can be implemented using WSHumanTask
by setting the implementation attribute to “http://docs.oasis-open.org/ns/bpel4people/ws-humantask/protocol/
200803.”

The User Task inherits the attributes and model associations of Activity (see Table 10.3). Table 10.13 presents the
additional attributes and model associations of the User Task. If implementations extend these attributes (e.g., to
introduce subjects or descriptions with presentation parameters), they SHOULD use attributes defined by the OASIS WSHumanTask
specification.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#CommonExecutableProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#DescriptiveProcessModelingConformance> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#HumanInteraction> ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Task> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass <http://www.reiter.at/ontology/bpmn2.0#Rendering> ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#renderings> ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#implementation> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#UserTaskInstance>
  rdf:type owl:Class ;
  rdf:type owl:NamedIndividual ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#Activities> ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:integer ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#taskPriority> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      rdf:type owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty <http://www.reiter.at/ontology/bpmn2.0#actualOwner> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
<http://www.reiter.at/ontology/bpmn2.0#activationCondition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Determines which combination of incoming tokens will be synchronized for activation of the Gateway." ;
.
<http://www.reiter.at/ontology/bpmn2.0#activationCount>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Refers at runtime to the number of tokens that are present on an incoming
Sequence Flow of the Complex Gateway.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#activityRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """For a Start Event:
This Event “catches” the compensation for an Event Sub-Process. No further
information is REQUIRED. The Event Sub-Process will provide the Id necessary
to match the Compensation Event with the Event that threw the compensation,
or the compensation will have been a broadcast.
For an End Event:
The Activity to be compensated MAY be supplied. If an Activity is not supplied,
then the compensation is broadcast to all completed Activities in the current SubProcess
(if present), or the entire Process instance (if at the global level).
For an Intermediate Event within normal flow:
The Activity to be compensated MAY be supplied. If an Activity is not supplied,
then the compensation is broadcast to all completed Activities in the current SubProcess
(if present), or the entire Process instance (if at the global level). This
“throws” the compensation.
For an Intermediate Event attached to the boundary of an Activity:
This Event “catches” the compensation. No further information is REQUIRED. The
Activity the Event is attached to will provide the Id necessary to match the
Compensation Event with the Event that threw the compensation, or the
compensation will have been a broadcast.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#actualOwner>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Returns the “user” who picked/claimed the User task and became the actual
owner of it. The value is a literal representing the user’s id, email address
etc.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#artifact>
  rdf:type owl:ObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#artifacts>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Collaboration
This attribute provides the list of Artifacts that are contained within the
Collaboration.

Process
This attribute provides the list of Artifacts that are contained within the
Process.

Sub-Process
This attribute provides the list of Artifacts that are contained within the
Sub-Process.

Sub-Choreography Model Associations
artifacts: Artifact [0..*] This attribute provides the list of Artifacts that are contained within the SubChoreography""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#assignment>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Specifies one or more data elements Assignments. By using an
Assignment, single data structure elements can be assigned from the
source structure to the target structure.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#associationDirection>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "associationDirection is an attribute that defines whether or not the Association shows any directionality with an arrowhead. The default is None (no arrowhead). A value of One means that the arrowhead SHALL be at the Target Object. A value of Both means that there SHALL be an arrowhead at both ends of the Association line." ;
.
<http://www.reiter.at/ontology/bpmn2.0#attachedToRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Denotes the Activity that boundary Event is attached to." ;
.
<http://www.reiter.at/ontology/bpmn2.0#auditing>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Process
This attribute provides a hook for specifying audit related properties.


FlowElement
A hook for specifying audit related properties. Auditing can only be
defined for a Process.""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#behavior>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The attribute behavior acts as a shortcut for specifying when events
SHALL be thrown from an Activity instance that is about to complete. It
can assume values of None, One, All, and Complex, resulting in the
following behavior:
• None: the EventDefinition which is associated through the
noneEvent association will be thrown for each instance
completing.
• One: the EventDefinition referenced through the oneEvent
association will be thrown upon the first instance completing.
• All: no Event is ever thrown; a token is produced after completion
of all instances.
• Complex: the complexBehaviorDefinitions are consulted to
determine if and which Events to throw.
For the behaviors of none and one, a default
SignalEventDefinition will be thrown which automatically carries
the current runtime attributes of the MI Activity.
Any thrown Events can be caught by boundary Events on the MultiInstance
Activity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#body>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The body of the Expression.
Note that this attribute is not relevant when the XML Schema is used for interchange. Instead, the FormalExpression complex type supports mixed content. The body of the Expression would be specified as element content. 

For example:

<formalExpression id=“ID_2\">
   count(../dataObject[id=\"CustomerRecord_1\"]/emailAddress) > 0
   <evaluatesToType id=\"ID_3\" typeRef=“xsd:boolean\"/>
</formalExpression>""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#bottom_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• bottom_initiating - the band should be depicted as a non shaded bottom band" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#bottom_non_initiating>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#boundaryEventRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This references the Intermediate Events that are attached to the boundary of the Activity." ;
.
<http://www.reiter.at/ontology/bpmn2.0#bpmn:defaultValue>
  rdf:type owl:AnnotationProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#bpmnElement>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMN Edge
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to a connecting BPMN element that this edge depicts. Note that this reference is only optional for
the specific case of a Data Association connected to a Sequence Flow; in all other cases a referenced element
must be provided.""" ;
  rdfs:comment """BPMNPlane
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to either a Process, SubProcess, AdHocSubProcess, Transaction, Collaboration, Choreography or
SubChoreography in a BPMN model.""" ;
  rdfs:comment """BPMNShape
• + bpmnElement : BaseElement [0..1] {redefines modelElement}
a reference to a BPMN node element that this shape depicts. Note that although optional a bpmnElement must be
provided for a BPMNShape.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#callableElements>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The CallableElements that use this Interface." ;
.
<http://www.reiter.at/ontology/bpmn2.0#calledChoreographyRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Call Choreography Model Associations
calledChoreographyRef:
CallableElement [0..1]
The element to be called, which will be either a Choreography or a
GlobalChoreographyTask""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#calledCollaborationRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The element to be called, which MAY be either a Collaboration or a
GlobalConversation. The called element MUST NOT be a
Choreography or a GlobalChoreographyTask (which are subtypes
of Collaboration)""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#calledElement>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The element to be called, which will be either a Process or a
GlobalTask. Other CallableElements, such as Choreography,
GlobalChoreographyTask, Conversation, and
GlobalCommunication MUST NOT be called by the Call Conversation
element.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#cancelActivity>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Denotes whether the Activity should be cancelled or not, i.e., whether the boundary
catch Event acts as an Error or an Escalation. If the Activity is not cancelled,
multiple instances of that handler can run concurrently.
This attribute cannot be applied to Error Events (where it’s always true), or
Compensation Events (where it doesn’t apply).""" ;
  rdfs:comment """Table 10.92 – Possible Values of the cancelActivity Attribute
Trigger Possible Values for the cancelActivity Attribute
None N/A as this event cannot be attached to the Activity border.
Message True/false
Timer True/false
Escalation True/false
Error True
Cancel True
Compensation N/A as the scope was already executed and can no longer be canceled when
compensation is triggered.
Conditional True/false
Signal True/false
Multiple True/false if all Event triggers allow this option (see this table for details). Otherwise
the more restrictive option, i.e., Yes in case any Error or cancel triggers are used.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#cancelRemainingInstances>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute is used only if ordering is parallel. It determines whether running
instances are cancelled when the completionCondition becomes true.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#capacity>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Defines the capacity of the Data Store. This is not needed if the
isUnlimited attribute is set to true.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#categorizedFlowElements>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The FlowElements attribute identifies all of the elements (e.g., Events, Activities, Gateways, and Artifacts) that are within the boundaries of the Group." ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#category>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The category attribute specifies the Category representing the Category as such and contains the CategoryValue (Further details about the definition of a Category can be found on page 70)." ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#categoryValue>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The categoryValue attribute specifies one or more values of the Category. For example, the Category is “Region” then this Category could specify values like “North,” “South,” “West,” and “East.”" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#categoryValueRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Group
The categoryValueRef attribute specifies the CategoryValue that
the Group represents. (Further details about the definition of a Category
and CategoryValue can be found on page 70.) The name of the
Category and the value of the CategoryValue separated by delineator
\".\" provides the label for the Group. The graphical elements within the
boundaries of the Group will be assigned the CategoryValue.

FlowElement
A reference to the Category Values that are associated with this Flow
Element.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#childLaneSet>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to a LaneSet element for embedded Lanes." ;
.
<http://www.reiter.at/ontology/bpmn2.0#choreographyActivityShape>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMNShape
• + choreographyActivityShape : BPMNShape [0..1]
an optional attribute that should only be used for Participant Bands. It is REQUIRED for a BPMNShape depicting a
Participant Band. This is REQUIRED in order to relate the Participant Band to the BPMNShape depicting the
Choreography Activity that this Participant Band is related to.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#choreographyRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The choreographyRef model association defines the Choreographies that
can be shown between the Pools of the Collaboration. A Choreography
specifies a business contract (or the order in which messages will be
exchanged) between interacting Participants. See page 315 for more details
on Choreography.
The participantAssociations (see below) are used to map the
Participants of the Choreography to the Participants of the Collaboration.
The MessageFlowAssociations (see below) are used to map the
Message Flows of the Choreography to the Message Flows of the
Collaboration.
The conversationAssociations (see below) are used to map the
Conversations of the Choreography to the Conversations of the
Collaboration.
Note that this attribute is not applicable for Choreography or
GlobalConversation which are a subtypes of Collaboration. Thus, a
Choreography cannot reference another Choreography""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#completionCondition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """AdHocSub-Process
This Expression defines the conditions when the Process will end. When
the Expression is evaluated to true, the Process will be terminated.

MultiInstanceLoopCharacteristics
This attribute defines a boolean Expression that when evaluated to
true, cancels the remaining Activity instances and produces a token""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#completionQuantity>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "The default value is 1. The value MUST NOT be less than 1. This attribute defines the number of tokens that MUST be generated from the Activity. This number of tokens will be sent done any outgoing Sequence Flow (assuming any Sequence Flow conditions are satis- fied). Note that any value for the attribute that is greater than 1 is an advanced type of modeling and should be used with caution." ;
.
<http://www.reiter.at/ontology/bpmn2.0#complexBehaviorDefinition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Controls when and which Events are thrown in case behavior is set to
complex.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#condition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ComplexBehaviorDefinition
This attribute defines a boolean Expression that when evaluated to true,
cancels the remaining Activity instances and produces a token.

ConditionalEventDefinition
The Expression might be underspecified and provided in the form of natural
language. For executable Processes (isExecutable = true), if the trigger is
Conditional, then a FormalExpression MUST be entered.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#conditionExpression>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "An optional boolean Expression that acts as a gating condition. A token will only be placed on this Sequence Flow if this conditionExpression evaluates to true." ;
.
<http://www.reiter.at/ontology/bpmn2.0#conversationAssociations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute provides a list of mappings from the Conversations of a
referenced Collaboration to the Conversations of another Collaboration.
It is used when:
• When a Choreography is referenced by a Collaboration""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#conversationLinks>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Collaboration
This provides the Conversation Links that are used in the Collaboration""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#conversationNodes>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Sub-Conversation
The ConversationNodes model aggregation relationship allows a SubConversation
to contain other ConversationNodes, in order to group
Message Flows of the Sub-Conversation and associate correlation
information.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#conversations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The conversations model aggregation relationship allows a
Collaboration to contain Conversation elements, in order to group
Message Flows of the Collaboration and associate correlation information,
as is REQUIRED for the definitional Collaboration of a Process model. The
Conversation elements will be visualized if the Collaboration is a
Collaboration, but not for a Choreography.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationKeyRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The CorrelationKey this CorrelationSubscription refers
to.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationKeys>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ConversationNode
This is a list of the ConversationNode’s CorrelationKeys, which are used to
group Message Flows for the ConversationNode.

Collaboration
This association specifies CorrelationKeys used to associate Messages
to a particular Collaboration.

Choreography
This association specifies correlationKeys used by the Message Flow
in the Choreography Activity, including Sub-Choreographies and called
Choreographies.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationPropertyBinding>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """CorrelationSubscription
The bindings to specific CorrelationProperties and
FormalExpressions (extraction rules atop the Process context).""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationPropertyRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """CorrelationKey:The CorrelationProperties, representing the partial keys of this
CorrelationKey.

CorrelationPropertyBinding: The specific CorrelationProperty, this
CorrelationPropertyBinding refers to.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationPropertyRetrievalExpression>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The CorrelationPropertyRetrievalExpressions for
this CorrelationProperty, representing the associations of
FormalExpressions (extraction paths) to specific Messages
occurring in this Conversation.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#correlationSubscriptions>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """correlationSubscriptions are a feature of context-based correlation
(cf. section 8.3.3). CorrelationSubscriptions are used to
correlate incoming Messages against data in the Process context. A
Process MAY contain several correlationSubscriptions.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataInputAssociations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
An optional reference to the DataInputAssociations. A DataInputAssociation defines how the DataInput of the Activity’s InputOutputSpecification will be populated.

ThrowEvent
The Data Associations of the throw Event.
The dataInputAssociation of a throw Event is responsible for
the assignment of a data element that is in scope of the Event to the
Event data.
For a throw Multiple Event, multiple Data Associations might be
REQUIRED, depending on the individual results of the Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataInputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The DataInput elements that collectively make up this data requirement." ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataInputs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """InputOutputSpecification
An optional reference to the Data Inputs of the
InputOutputSpecification. If the InputOutputSpecification
defines no Data Input, it means no data is REQUIRED to start the
Activity. This is an ordered set.

ThrowEvent
The Data Inputs for the throw Event. This is an ordered set.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataObjectRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The Data Object referenced by the Data Object Reference." ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataOutputAssociations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
An optional reference to the DataOutputAssociations.

CatchEvent
The Data Associations of the catch Event.
The dataOutputAssociation of a catch Event is used to assign
data from the Event to a data element that is in the scope of the
Event.
For a catch Multiple Event, multiple Data Associations might be
REQUIRED, depending on the individual triggers of the Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataOutputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The DataOutput elements that MAY collectively be outputted." ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataOutputs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """InputOutputSpecification
An optional reference to the Data Outputs of the
InputOutputSpecification. If the InputOutputSpecification
defines no Data Output, it means no data is REQUIRED to finish the
Activity. This is an ordered set.

CatchEvent
The Data Outputs for the catch Event. This is an ordered set.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataPath>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The FormalExpression that defines the extraction rule atop the Process
context.
correlationPropertyRef:
CorrelationProperty
The specific""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataState>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A reference to the DataState, which defines certain states for the data
contained in the Item.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#dataStoreRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """DataStore
Provides the reference to a global DataStore.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#default>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
The Sequence Flow that will receive a token when none of the
conditionExpressions on other outgoing Sequence Flows evaluate
to true. The default Sequence Flow should not have a
conditionExpression. Any such Expression SHALL be ignored.

ExclusiveGateway
The Sequence Flow that will receive a token when none of the
conditionExpressions on other outgoing Sequence Flows evaluate
to true. The default Sequence Flow should not have a
conditionExpression. Any such Expression SHALL be ignored.

InclusiveGateway
The Sequence Flow that will receive a token when none of the
conditionExpressions on other Sequence Flows evaluate to true.
The default Sequence Flow should not have a conditionExpression.
Any such Expression SHALL be ignored.

ComplexGateway
The Sequence Flow that will receive a token when none of the
conditionExpressions on other Sequence Flows evaluate to true.
The default Sequence Flow should not have a
conditionExpression. Any such Expression SHALL be ignored.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#definition>
  rdf:type owl:ObjectProperty ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#Extension> ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#definitionalCollaborationRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """For Processes that interact with other Participants, a definitional
Collaboration can be referenced by the Process. The definitional
Collaboration specifies the Participants the Process interacts with,
and more specifically, which individual service, Send or Receive Task,
or Message Event, is connected to which Participant through
Message Flows. The definitional Collaboration need not be displayed.
Additionally, the definitional Collaboration can be used to include Conversation
information within a Process.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#diagrams>
  rdf:type owl:ObjectProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#direction>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This attribute specifies the direction of the relationship." ;
.
<http://www.reiter.at/ontology/bpmn2.0#documentation>
  rdf:type owl:ObjectProperty ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
.
<http://www.reiter.at/ontology/bpmn2.0#endPointRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Participant

This attribute is used to specify the address (or endpoint reference) of
concrete services realizing the Participant.""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#error>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "If the trigger is an Error, then an Error payload MAY be provided." ;
.
<http://www.reiter.at/ontology/bpmn2.0#errorCode>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """For an End Event:
If the result is an Error, then the errorCode MUST be supplied (if the processType attribute of the Process is set to execut- able) This “throws” the Error.

For an Intermediate Event within normal flow:
If the trigger is an Error, then the errorCode MUST be entered
(if the processType attribute of the Process is set to execut-
able). This “throws” the Error.

For an Intermediate Event attached to the boundary of an Activity:
If the trigger is an Error, then the errorCode MAY be entered. This Event “catches” the Error. If there is no errorCode, then any error SHALL trigger the Event. If there is an errorCode, then only an Error that matches the errorCode SHALL trigger the Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#errorRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute specifies errors that the Operation may return. An Operation
MAY refer to zero or more Error elements.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#escalationCode>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """For an End Event:
If the Result is an Escalation, then the escalationCode
MUST be supplied (if the processType attribute of the Process is set to executable). This “throws” the Escalation.

For an Intermediate Event within normal flow:
If the trigger is an Escalation, then the escalationCode
MUST be entered (if the processType attribute of the Process is
set to executable). This “throws” the Escalation.

For an Intermediate Event attached to the boundary of an Activity:
If the trigger is an Escalation, then the escalationCode MAY be entered. This Event “catches” the Escalation. If there is no escalationCode, then any Escalation SHALL trigger the Event. If there is an escalationCode, then only an Escala- tion that matches the escalationCode SHALL trigger the Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#escalationRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """If the trigger is an Escalation, then an Escalation payload MAY be
provided.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#evaluatesToTypeRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The type of object that this Expression returns when evaluated. For example, conditional Expressions evaluate to a boolean." ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#event>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """If the condition is true, this identifies the Event that will be thrown (to be
caught by a boundary Event on the Multi-Instance Activity).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#eventDefinitionRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """CatchEvent
References the reusable EventDefinitions that are triggers
expected for a catch Event. Reusable EventDefinitions are
defined as top-level elements. These EventDefinitions can be
shared by different catch and throw Events.
• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90).
This is an ordered set.

ThrowEvent
References the reusable EventDefinitions that are results
expected for a throw Event. Reusable EventDefinitions are
defined as top-level elements. These EventDefinitions can be
shared by different catch and throw Events.
• If there is no EventDefinition defined, then this is
considered a throw None Event and the Event will not have an
internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a throw Multiple Event and the Event will have the
pentagon internal marker (see Figure 10.90).
This is an ordered set.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#eventDefinitions>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ThrowEvent
Defines the event EventDefinitions that are results expected for
a throw Event. These EventDefinitions are only valid inside the
current Event.
• If there is no EventDefinition defined, this is considered a
throw None Event and the Event will not have an Internal
marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a throw Multiple Event and the Event will have the
pentagon internal marker (see Figure 10.90).
This is an ordered set.

CatchEvent
Defines the event EventDefinitions that are triggers expected
for a catch Event. These EventDefinitions are only valid inside
the current Event.
• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90).
This is an ordered set.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#eventGatewayType>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The eventGatewayType determines the behavior of the Gateway when used to instantiate a Process (as described above).
The attribute can only be set to parallel when the instantiate attribute is set to true.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#exporter>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This attribute identifies the tool that is exporting the bpmn model file." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#exporterVersion>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute identifies the version of the tool that is exporting the bpmn
model file.""" ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#expression>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ResourceAssignmentExpression
The element ResourceAssignmentExpression MUST contain an
Expression which is used at runtime to assign resource(s) to a
ResourceRole element.

ResourceParameterBinding: The Expression that evaluates the value used to bind the
ResourceParameter.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#expressionLanguage>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This attribute identifies the formal Expression language used in Expressions within the elements of this Definition. The Default is “http://www.w3.org/1999/XPath”. This value MAY be overridden on each individual formal Expression. The language MUST be specified in a URI format." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#extensionAttributeDefinition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Defines the extension attribute for which this value is being provided." ;
.
<http://www.reiter.at/ontology/bpmn2.0#extensionAttributeDefinitions>
  rdf:type owl:ObjectProperty ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#ExtensionDefinition> ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#extensionDefinitions>
  rdf:type owl:ObjectProperty ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#extensionValues>
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This attribute is used to provide values for extended attributes and model associations. This association is not applicable when the XML schema interchange is used, since the XSD mechanisms for supporting anyAttribute and any element already satisfy this requirement. See page 57 for additional information on extensibility." ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#BaseElement> ;
  rdfs:subPropertyOf owl:topDataProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#extensions>
  rdf:type owl:ObjectProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#flowElements>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This association specifies the particular flow elements contained in a FlowElementContainer. Flow elements are Events, Gateways, Sequence Flows, Activities, Data Objects, Data Associations, and Choreography Activities.
Note that:
• ChoreographyActivitiesMUSTNOTbeincludedasaflowElementfora Process.
• Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#flowNodeRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The list of FlowNodes partitioned into this Lane according to the partitionElement defined as part of the Lane element." ;
.
<http://www.reiter.at/ontology/bpmn2.0#font>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMNLabelStyle
 + font : Font[1] - a font object that describes the properties of the font used for depicting the labels that reference this
style.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#from>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Assignment
The Expression that evaluates the source of the Assignment.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#gatewayDirection>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "An attribute that adds constraints on how the Gateway MAY be used." ;
.
<http://www.reiter.at/ontology/bpmn2.0#id>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This attribute is used to uniquely identify BPMN elements. The id is REQUIRED if this element is referenced or intended to be referenced by something else. If the element is not currently referenced and is never intended to be referenced, the id MAY be omitted." ;
.
<http://www.reiter.at/ontology/bpmn2.0#implementation>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Service Task
This attribute specifies the technology that will be used to
send and receive the Messages. Valid values are \"##unspecified\"
for leaving the implementation technology open,
\"##WebService\" for the Web service technology or a URI
identifying any other technology or coordination protocol. A
Web service is the default technology.

Send Task 
This attribute specifies the technology that will be used to send and receive the
Messages. Valid values are \"##unspecified\" for leaving the implementation
technology open, \"##WebService\" for the Web service technology or a URI
identifying any other technology or coordination protocol A Web service is the
default technology

Receive Task
This attribute specifies the technology that will be used to send and receive
the Messages. Valid values are \"##unspecified\" for leaving the implementation
technology open, \"##WebService\" for the Web service technology or a
URI identifying any other technology or coordination protocol A Web service
is the default technology

Business Rule Task
This attribute specifies the technology that will be used to implement the
Business Rule Task. Valid values are \"##unspecified\" for leaving the
implementation technology open, \"##WebService\" for the Web service
technology or a URI identifying any other technology or coordination protocol.
The default technology for this task is unspecified.

User Task
This attribute specifies the technology that will be used to implement the
User Task. Valid values are \"##unspecified\" for leaving the implementation
technology open, \"##WebService\" for the Web service technology or a URI
identifying any other technology or coordination protocol. The default technology
for this task is unspecified.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#implementationRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Interface
This attribute allows to reference a concrete artifact in the underlying
implementation technology representing that interface, such
as a WSDL porttype.

Operation
This attribute allows to reference a concrete artifact in the underlying implementation
technology representing that operation, such as a WSDL operation.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#import>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Identifies the location of the data structure and its format. If the importType attribute is left unspecified, the typeLanguage specified in the Definitions that contains this ItemDefinition is assumed." ;
.
<http://www.reiter.at/ontology/bpmn2.0#importType>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Identifies the type of document being imported by providing an absolute URI that identifies the encoding language used in the document.The value of the importType attribute MUST be set to http://www.w3.org/2001/XMLSchema when importing XML Schema 1.0 documents, to http://www.w3.org/TR/wsdl20/ when importing WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL when importing BPMN 2.0 documents. Other types of documents MAY be supported. Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0 types MUST be supported." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#imports>
  rdf:type owl:ObjectProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#inMessageRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute specifies the input Message of the Operation. An Operation
has exactly one input Message.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#incoming>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This attribute identifies the incoming Sequence Flow of the FlowNode." ;
.
<http://www.reiter.at/ontology/bpmn2.0#initiating>
  rdf:type owl:Class ;
  rdfs:comment "• initiating - The envelope should not be shaded." ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MessageVisibleKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#initiatingParticipantRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Choreography Activity Model Associations
One of the Participants will be the one that initiates the Choreography
Activity.""" ;
  rdfs:comment """Global Choreography Task Model Associations
initiatingParticipantRef:
Participant
One of the Participants will be the one that initiates the Global
Choreography Task.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#innerConversationNodeRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the ConversationNodes of the referenced
element (e.g., a Choreography to be used in a Collaboration) that will
be mapped to the parent element (e.g., the Collaboration).""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#innerMessageFlowRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the Message Flow of the referenced
element (e.g., a Choreography to be used in a Collaboration)
that will be mapped to the parent element (e.g., the
Collaboration).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#innerParticipantRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the Participant of the referenced element (e.g., a
Choreography to be used in a Collaboration) that will be mapped to the
parent element (e.g., the Collaboration).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputDataItem>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A Data Input, representing for every Activity instance the single item of
the collection stored in the loopDataInput. This Data Input can be
the source of DataInputAssociation to a data input of the Activity’s
InputOutputSpecification. The type of this Data Input MUST the
scalar of the type defined for the loopDataInput.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputDataRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A reference to one specific DataInput defined as part of the
InputOutputSpecification of the Activity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputSetRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """DataInput
A DataInput is used in one or more InputSets. This attribute is
derived from the InputSets.

OutputSet
Specifies an Input/Output rule that defines which InputSet has to
become valid to expect the creation of this OutputSet. This attribute is
paired with the outputSetRefs attribute of InputSets. This combination
replaces the IORules attribute for Activities in BPMN 1.2.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputSetWithOptional>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Each InputSet that uses this DataInput can determine if the Activity
can start executing with this DataInput state in “unavailable.” This
attribute lists those InputSets.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputSetWithWhileExecuting>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Each InputSet that uses this DataInput can determine if the Activity
can evaluate this DataInput while executing. This attribute lists those
InputSets.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#inputSets>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """InputOutputSpecification
A reference to the InputSets defined by the
InputOutputSpecification. Every
InputOutputSpecification MUST define at least one InputSet

ThrowEvent
The InputSet for the throw Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#instantiate>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Receive Task
Receive Tasks can be defined as the instantiation mechanism for the
Process with the instantiate attribute. This attribute MAY be set to true if
the Task is the first Activity (i.e., there are no incoming Sequence Flows).
Multiple Tasks MAY have this attribute set to true.

EventBasedGateway
When true, receipt of one of the Events will instantiate the Process
instance.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#interfaceRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This association defines Interfaces that a Participant supports. The
definition of Interfaces is provided on page 104.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#ioBinding>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The InputOutputBinding defines a combination of one InputSet and
one OutputSet in order to bind this to an operation defined in an
interface.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#ioSpecification>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
The InputOutputSpecification defines the inputs and outputs and the InputSets and OutputSets for the Activity. See page 211 for more information on the InputOutputSpecification.

CallableElement
The InputOutputSpecification defines the inputs and outputs and the
InputSets and OutputSets for the Activity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isClosed>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Collaboration
A boolean value specifying whether Message Flows not modeled in the
Collaboration can occur when the Collaboration is carried out.
• If the value is true, they MAY NOT occur.
• If the value is false, they MAY occur.

Process:
A boolean value specifying whether interactions, such as sending and
receiving Messages and Events, not modeled in the Process can
occur when the Process is executed or performed. If the value is true,
they MAY NOT occur. If the value is false, they MAY occur.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isCollection>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """ItemDefinition
Setting this flag to true indicates that the actual data type is a
collection.

DataObject
Defines if the Data Object represents a collection of elements. It is needed
when no itemDefinition is referenced. If an itemDefinition is
referenced, then this attribute MUST have the same value as the
isCollection attribute of the referenced itemDefinition. The default
value for this attribute is false.

DataInput
Defines if the DataInput represents a collection of elements. It is needed
when no itemDefinition is referenced. If an itemDefinition is
referenced, then this attribute MUST have the same value as the
isCollection attribute of the referenced itemDefinition. The
default value for this attribute is false.

DataOutput
Defines if the DataOutput represents a collection of elements. It is
needed when no itemDefinition is referenced. If an
itemDefinition is referenced, then this attribute MUST have the
same value as the isCollection attribute of the referenced
itemDefinition. The default value for this attribute is false.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isExecutable>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """An optional Boolean value specifying whether the Process is executable.
An executable Process is a private Process that has been modeled for
the purpose of being executed according to the semantics of Chapter
14 (see page 426). Of course, during the development cycle of the Process,
there will be stages where the Process does not have enough
detail to be “executable.”
A non-executable Process is a private Process that has been modeled
for the purpose of documenting Process behavior at a modeler-defined
level of detail. Thus, information needed for execution, such as formal
condition expressions are typically not included in a non-executable
Process.
For public Processes, no value has the same semantics as if the value
were false. The value MAY not be true for public Processes.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isExpanded>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """BPMNShape
• + isExpanded : Boolean [0..1]
an optional attribute that should be used only for SubProcess, AdHocSubProcess, Transaction, SubChoreographies ,
CallActivities and CallChoreographies. It determines if it should be depicted expanded (true) or collapsed (false).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isForCompensation>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """A flag that identifies whether this Activity is intended for the purposes of
compensation.
If false, then this Activity executes as a result of normal execution flow.
If true, this Activity is only activated when a Compensation Event is
detected and initiated under Compensation Event visibility scope (see
page 281 for more information on scopes).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isHorizontal>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """BPMNShapeBPMNShape
+ isHorizontal : Boolean [0..1]
an optional attribute that should be used only for Pools and Lanes. It determines if it should be depicted horizontally
(true) or vertically (false).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isImmediate>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """An optional boolean value specifying whether Activities or Choreography Activities not in the model containing the Sequence Flow can occur between the elements connected by the Sequence Flow. 
If the value is true, they MAY NOT occur. If the value is false, they MAY occur. 
Also see the isClosed attribute on Process, Choreography, and Collaboration. 
When the attribute has no value, the default semantics depends on the kind of model containing Sequence Flows:

• For non-executable Processes (public Processes and non-executable private Processes) and Choreographies no value has the same semantics as if the value were false.

• For an executable Processes no value has the same semantics as if the value were true.

• For executable Processes, the attribute MUST NOT be false.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isInterrupting>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Start Event
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for
other Start Events. This attribute denotes whether the Sub-Process encompassing
the Event Sub-Process should be cancelled or not, If the encompassing SubProcess
is not cancelled, multiple instances of the Event Sub-Process can run
concurrently. This attribute cannot be applied to Error Events (where it’s always
true), or Compensation Events (where it doesn’t apply).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isMarkerVisible>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """BPMNShape
• + isMarkerVisible : Boolean [0..1]
an optional attribute that should be used only for Exclusive Gateway. It determines if the marker should be depicted on
the shape (true) or not (false).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isMessageVisible>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """BPMNShape
• + isMessageVisible : Boolean [0..1]
an optional attribute that should only be used for Participant Bands. It determines if an envelope decorator should be
depicted linked to the Participant Band.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isReference>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Indicates if the attribute value will be referenced or contained.

Default Value = false""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isRequired>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Specifies, if a parameter is optional or mandatory." ;
.
<http://www.reiter.at/ontology/bpmn2.0#isSequential>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """boolean = false This attribute is a flag that controls whether the Activity instances will
execute sequentially or in parallel.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#isUnlimited>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """boolean = false If isUnlimited is set to true, then the capacity of a Data Store is set as
unlimited and will override any value of the capacity attribute.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#itemKind>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This defines the nature of the Item. Possible values are physical or information. The default value is information." ;
.
<http://www.reiter.at/ontology/bpmn2.0#itemRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "An ItemDefinition is used to define the “payload” of the Message." ;
.
<http://www.reiter.at/ontology/bpmn2.0#itemSubjectRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Specification of the items that are stored or conveyed by the
ItemAwareElement.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#label>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMN Edge
• + label : BPMNLabel [0..1] {subsets ownedLabel}
an optional label that is nested when the edge has a visible text label with its own bounding box.""" ;
  rdfs:comment """BPMNShape
• + label : BPMNLabel [0..1] {subsets ownedLabel}
an optional label that is nested when the shape has a visible text label with its own bounding box.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#labelStyle>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMNDiagram
• + labelStyle : BPMNLabelStyle [*] {subsets style}
a collection of BPMN label styles that are owned by the diagram and referenced by label elements""" ;
  rdfs:comment """BPMNLabel
 + labelStyle : BPMNLabelStyle [0..1] {redefines style}
an optional reference to a label style (owned by the diagram) that gives the appearance options for the label. If
not specified, the style of the label can be assumed by a tool.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#laneSets>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This attribute defines the list of LaneSets used in the FlowElementsContainer LaneSets are not used for Choreographies or Sub-Choreographies." ;
.
<http://www.reiter.at/ontology/bpmn2.0#lanes>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "One or more Lane elements, which define a specific partition in the LaneSet." ;
.
<http://www.reiter.at/ontology/bpmn2.0#language>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Overrides the Expression language specified in the Definitions. The language MUST be specified in a URI format." ;
.
<http://www.reiter.at/ontology/bpmn2.0#location>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Identifies the location of the imported element." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopCardinality>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A numeric Expression that controls the number of Activity instances
that will be created. This Expression MUST evaluate to an integer.
This MAY be underspecified, meaning that the modeler MAY simply document
the condition. In such a case the loop cannot be formally
executed.
In order to initialize a valid multi-instance, either the loopCardinality
Expression or the loopDataInput MUST be specified.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopCharacteristics>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """An Activity MAY be performed once or MAY be repeated. If repeated,
the Activity MUST have loopCharacteristics that define the repetition
criteria (if the isExecutable attribute of the Process is set to
true).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopCondition>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A boolean Expression that controls the loop. The Activity will only loop
as long as this condition is true. The looping behavior MAY be
underspecified, meaning that the modeler can simply document the
condition, in which case the loop cannot be formally executed.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopCounter>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Loop Activity instance attributes
The LoopCounter attribute is used at runtime to count the number of loops
and is automatically updated by the process engine

Multi-instance Activity instance attributes
This attribute is provided for each generated (inner) instance of the
Activity. It contains the sequence number of the generated
instance, i.e., if this value of some instance in n, the instance is the
n-th instance that was generated.

 Loop Activity
The LoopCounter attribute is used at runtime to count the number of loops
and is automatically updated by the process engine.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopDataInputRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This ItemAwareElement is used to determine the number of Activity
instances, one Activity instance per item in the collection of data stored
in that ItemAwareElement element.
For Tasks it is a reference to a Data Input which is part of the Activity’s
InputOutputSpecification.
For Sub-Processes it is a reference to a collection-valued Data Object
in the context that is visible to the Sub-Processes.
In order to initialize a valid multi-instance, either the loopCardinality
Expression or the loopDataInput MUST be specified.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopDataOutputRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This ItemAwareElement specifies the collection of data, which will be
produced by the multi-instance.
For Tasks it is a reference to a Data Output which is part of the
Activity’s InputOutputSpecification.
For Sub-Processes it is a reference to a collection-valued Data Object
in the context that is visible to the Sub-Processes.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopMaximum>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Serves as a cap on the number of iterations." ;
.
<http://www.reiter.at/ontology/bpmn2.0#loopType>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Choreography Activity Model Associations
loopType: ChoreographyLoopType =None
A Choreography Activity MAY be performed once or MAY be repeated.
The loopType attribute will determine the appropriate marker for the
Choreography Activity (see below).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#maximum>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """The maximum attribute defines maximum number of Participants that MAY
be involved in the Collaboration. The value of maximum MUST be one or
greater, AND MUST be equal or greater than the minimum value.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messageFlow>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This provides the list of Message Flows that are used in the Collaboration.
Message Flows are visualized in Collaboration (as dashed line) and
hidden in Choreography.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messageFlowAssociations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute provides a list of mappings for the Message Flows of the
Collaboration to Message Flows of a referenced model. It is used in the
following situation:
• When a Choreography is referenced by a Collaboration. This allows
the \"wiring up\" of the Collaboration Message Flows to the
appropriate Choreography Activities.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messageFlowRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ConversationNode
A reference to all Message Flows (and consequently Messages) grouped by a
Conversation element.

Choreography Task Model Associations
messageFlowRef: Message
Flow [1..*]
Although not graphical represented, Choreography Task contains one or
more Message Flows that represent the interaction(s) between the
Participants referenced by the Choreography Task.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messagePath>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The FormalExpression that defines how to extract a
CorrelationProperty from the Message payload.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messageRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """CorrelationPropertyRetrievalExpression
The specific Message the FormalExpression extracts the
CorrelationProperty from.

Message Flow 
The messageRef model association defines the Message that is passed
via the Message Flow (see page 93 for more details).

 Send Task
A Message for the messageRef attribute MAY be entered. This indicates that
the Message will be sent by the Task. The Message in this context is
equivalent to an out-only message pattern (Web service). One or more
corresponding outgoing Message Flows MAY be shown on the diagram.
However, the display of the Message Flows is NOT REQUIRED. The Message
is applied to all outgoing Message Flows and the Message will be sent down
all outgoing Message Flows at the completion of a single instance of the Task.

Receive Task
A Message for the messageRef attribute MAY be entered. This indicates
that the Message will be received by the Task. The Message in this context
is equivalent to an in-only message pattern (Web service). One (1) or more
corresponding incoming Message Flows MAY be shown on the diagram.
However, the display of the Message Flows is NOT REQUIRED. The
Message is applied to all incoming Message Flows, but can arrive for only
one (1) of the incoming Message Flows for a single instance of the Task.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#messageVisibleKind>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMN Edge
• messageVisibleKind : MessageVisibleKind [0..1]
an optional attribute that should be used only for Message Flow. It determines if an envelope decorator should be
depicted and the kind of envelope to be depicted.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#method>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The method is an attribute that defines the Transaction method used to commit or
cancel a Transaction. For executable Processes, it SHOULD be set to a technology
specific URI, e.g., http://schemas.xmlsoap.org/ws/2004/10/wsat for WSAtomicTransaction,
or http://docs.oasis-open.org/ws-tx/wsba/2006/
06/AtomicOutcome for WS-BusinessActivity. For compatibility with BPMN 1.1, it can
also be set to \"##compensate\", \"##store\", or \"##image\".""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#middle_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• middle_initiating - the band should be depicted as a non shaded middle band" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#middle_non_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• bottom_ non_initiating - the band should be depicted as a shaded bottom band" ;
  rdfs:comment "• middle_ non_initiating - the band should be depicted as a shaded middle band" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#minimum>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """The minimum attribute defines minimum number of Participants that
MUST be involved in the Collaboration. If a value is specified in the
maximum attribute, it MUST be greater or equal to this minimum value""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#monitoring>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """FlowElement
A hook for specifying monitoring related properties. Monitoring can only
be defined for a Process.

Process
This attribute provides a hook for specifying monitoring related properties.""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#mustUnderstand>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This flag defines if the semantics defined by the extension definition and its attribute definition MUST be understood by the BPMN adopter in order to process the BPMN model correctly. 

Defaults to False""" ;
  rdfs:domain <http://www.reiter.at/ontology/bpmn2.0#Extension> ;
.
<http://www.reiter.at/ontology/bpmn2.0#name>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Definitions
The name of the Definition.

ExtensionDefinition
The name of the extension. This is used as a namespace to
uniquely identify the extension content.

ExtensionAttributeDefinition
The name of the extension attribute.

Category
The descriptive name of the element.

CorrelationKey
Specifies the name of the CorrelationKey.

CorrelationProperty
Specifies the name of the CorrelationProperty.

FlowElement
The descriptive name of the element.

Message
Name is a text description of the Message.

Resource
This attribute specifies the name of the Resource.

ResourceParameter
Specifies the name of the query parameter.

Interface
The descriptive name of the element.

Operation
The descriptive name of the element.

Collaboration
Name is a text description of the Collaboration.

Participant
Name is a text description of the Participant. The name of the
Participant can be displayed directly or it can be substituted by the
associated PartnerRole or PartnerEntity. Potentially, both the
PartnerEntity name and PartnerRole name can be displayed for
the Participant. 

PartnerEntity
Name is a text description of the PartnerEntity

PartnerRole
Name is a text description of the PartnerRole

Message Flow 
Name is a text description of the Message Flow.

ConversationNode
Name is a text description of the ConversationNode element.

Conversation Link
This attribute specifies the name of the Conversation Link.

CallableElement
The descriptive name of the element

DataState
Defines the name of the DataState

Data Store
A descriptive name for the element.

Property
Defines the name of the Property. 

DataInput
A descriptive name for the element.

DataOutput
A descriptive name for the element.

InputSet
A descriptive name for the input set

OutputSet
A descriptive name for the output set.

LinkEventDefinition
If the trigger is a Link, then the name MUST be entered.

LaneSet
The name of the LaneSet. A LaneSet is not visually displayed on a BPMN
diagram. Consequently, the name of the LaneSet is not displayed as well.

Lane
The name of the Lane""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#namespace>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Identifies the namespace of the imported element." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#non_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• non_inititating - The envelope should be shaded" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MessageVisibleKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#none>
  rdf:type owl:Class ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ProcessType> ;
.
<http://www.reiter.at/ontology/bpmn2.0#noneBehaviorEventRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The EventDefinition which is thrown when the behavior is set to
none and an internal Activity instance has completed.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#numParticipants>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """The current number of the multiplicity of the Participant for this
Choreography or Collaboration Instance.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#numberOfActiveInstances>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute is provided for the outer instance of the Multi-Instance
Activity only. This attribute contains the number of
currently active inner instances for the Multi-Instance Activity. In
case of a sequential Multi-Instance Activity, this value can’t be
greater than 1. For parallel Multi-Instance Activities, this value
can’t be greater than the value contained in numberOfInstances.""" ;
  rdfs:range xsd:integer ;
.
<http://www.reiter.at/ontology/bpmn2.0#numberOfCompletedInstances>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute is provided for the outer instance of the Multi-Instance
Activity only. This attribute contains the number of already completed
inner instances for the Multi-Instance Activity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#numberOfInstances>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute is provided for the outer instance of the Multi-Instance
Activity only. This attribute contains the total number of inner
instances created for the Multi-Instance Activity.""" ;
  rdfs:range xsd:integer ;
.
<http://www.reiter.at/ontology/bpmn2.0#numberOfTerminatedInstances>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """This attribute is provided for the outer instance of the
Multi-Instance Activity only. This attribute contains the number of
terminated inner instances for the Multi-Instance Activity. The sum
of numberOfTerminatedInstances,
numberOfCompletedInstances, and
numberOfActiveInstances always sums up to
numberOfInstances.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#one>
  rdf:type owl:Class ;
  rdfs:comment """One: the EventDefinition referenced through the oneEvent
association will be thrown upon the first instance completing.""" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#MultiInstanceBehavior> ;
.
<http://www.reiter.at/ontology/bpmn2.0#oneBehaviorEventRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The EventDefinition which is thrown when behavior is set to one
and the first internal Activity instance has completed.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#operationRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Service Task
This attribute specifies the operation that is invoked by the
Service Task.

Send Task 
This attribute specifies the operation that is invoked by the Send Task.

Receive Task 
This attribute specifies the operation through which the Receive Task
receives the Message.

InputOutputBinding
A reference to one specific Operation defined as part of the Interface of
the Activity.

MessageEventDefinition
This attribute specifies the Operation that is used by the Message Event.
It MUST be specified for executable Processes.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#operations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute specifies operations that are defined as part of the
Interface. An Interface has at least one Operation.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#optionalInputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The DataInput elements that are a part of the InputSet that can be in the
state of “unavailable” when the Activity starts executing. This association
MUST NOT reference a DataInput that is not listed in the
dataInputRefs.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#optionalOutputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The DataOutput elements that are a part of the OutputSet that do not
have to be produced when the Activity completes executing. This association
MUST NOT reference a DataOutput that is not listed in the
dataOutputRefs.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#ordering>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """default = Parallel

This attribute defines if the Activities within the Process can be performed in
parallel or MUST be performed sequentially. The default setting is parallel
and the setting of sequential is a restriction on the performance that can be
needed due to shared resources. When the setting is sequential, then only
one Activity can be performed at a time. When the setting is parallel, then
zero (0) to all the Activities of the Sub-Process can be performed in parallel.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outMessageRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute specifies the output Message of the Operation. An Operation
has at most one input Message""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outerConversationNodeRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the ConversationNodes of the parent element
(e.g., a Collaboration references a Choreography) that will be mapped
to the referenced element (e.g., the Choreography).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outerMessageFlowRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the Message Flow of the parent element
(e.g., a Collaboration references a Choreography) that will be
mapped to the referenced element (e.g., the Choreography).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outerParticipantRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attribute defines the Participant of the parent element (e.g., a
Collaboration references a Choreography) that will be mapped to the
referenced element (e.g., the Choreography).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outgoing>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This attribute identifies the outgoing Sequence Flow of the FlowNode. This is an ordered collection." ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputDataItem>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A Data Output, representing for every Activity instance the single item
of the collection stored in the loopDataOutput. This Data Output can
be the target of DataOutputAssociation to a data output of the
Activity’s InputOutputSpecification. The type of this Data
Output MUST the scalar of the type defined for the loopDataOutput.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputDataRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A reference to one specific DataOutput defined as part of the
InputOutputSpecification of the Activity

InputOutputBinding
A reference to one specific Operation defined as part of the Interface of
the Activity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputSet>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The OutputSet for the catch Event" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputSetRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """DataOutput
A DataOutput is used in one or more OutputSets. This attribute is
derived from the OutputSets.

InputSet
Specifies an Input/Output rule that defines which OutputSet is expected to
be created by the Activity when this InputSet became valid.
This attribute is paired with the inputSetRefs attribute of OutputSets.
This combination replaces the IORules attribute for Activities in BPMN 1.2.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputSetWithOptional>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Each OutputSet that uses this DataOutput can determine if the
Activity can complete executing without producing this DataInput.
This attribute lists those OutputSets.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputSetWithWhileExecuting>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Each OutputSet that uses this DataInput can determine if the
Activity can produce this DataOutput while executing. This attribute
lists those OutputSets.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#outputSets>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """A reference to the OutputSets defined by the
InputOutputSpecification. Every Data Interface MUST define
at least one OutputSet.

CatchEvent
The OutputSet for the catch Event""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#parallelMultiple>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """CatchEvent
This attribute is only relevant when the catch Event has more than
EventDefinition (Multiple).
If this value is true, then all of the types of triggers that are listed in
the catch Event MUST be triggered before the Process is
instantiated.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#parameterRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "Reference to the parameter defined by the Resource." ;
.
<http://www.reiter.at/ontology/bpmn2.0#parentLane>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The reference to a Lane element which is the parent of this LaneSet." ;
.
<http://www.reiter.at/ontology/bpmn2.0#participant>
  rdf:type owl:ObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#participantAssociations>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Call Choreography Model Associations
participantAssociations:
ParticipantAssociation [0..*]
Specifies how Participants in a nested Choreography or
GlobalChoreographyTask match up with the Participants in the
Choreography referenced by the Call Choreography

CallConversation
This attribute provides a list of mappings from the Participants of a
referenced GlobalConversation or Conversation to the
Participants of the parent Conversation.

Collaborations: 
This attribute provides a list of mappings from the Participants of a
referenced Collaboration to the Participants of another Collaboration. It is
used in the following situations
• When a Choreography is referenced by the Collaboration.
• When a definitional Collaboration for a Process is referenced through
a Call Activity (and mapped to definitional Collaboration of the
calling Process).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#participantBandKind>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMNShape
• + participantBandKind : ParticipantBandKind [0..1]
an optional attribute that should only be used for Participant Bands. If this attribute is present, it means that the
participant should be depicted as a Participant Band instead of as a Pool.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#participantMultiplicity>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The participantMultiplicityRef model association is used to
define Participants that represent more than one (1) instance of the
Participant for a given interaction. See the next section for more details
on ParticipantMultiplicity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#participantRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """PartnerEntity
Specifies how the PartnerEntity participates in Collaborations and
Choreographies.

PartnerRole
Specifies how the PartnerRole participates in Collaborations and
Choreographies.""" ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#participantRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Choreography Activity Model Associations
A Choreography Activity has two or more Participants (see page 114 for
more information on Participants).

ConversationNode
This provides the list of Participants that are used in the ConversationNode
from the list provided by the ConversationNode’s parent Conversation. This
reference is visualized through a Conversation Link (see page 132).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#participants>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This provides the list of Participants that are used in the Collaboration.
Participants are visualized as Pools in a Collaboration and as Participant
Bands in Choreography Activities in a Choreography""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#partitionElement>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to a BaseElement that specifies the partition value and partition type. Using this partition element a BPMN compliant tool can determine the FlowElements that have to be partitioned in this Lane." ;
.
<http://www.reiter.at/ontology/bpmn2.0#partitionElementRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "A reference to a BaseElement that specifies the partition value and partition type. Using this partition element a BPMN compliant tool can determine the FlowElements that have to be partitioned in this Lane." ;
.
<http://www.reiter.at/ontology/bpmn2.0#partnerEntityRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The partnerEntityRef attribute identifies a PartnerEntity that
the Participant plays in the Collaboration. Both a PartnerRole and a
PartnerEntity MAY be defined for the Participant.This attribute is
derived from the participantRefs of PartnerEntity.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#partnerRoleRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The partnerRoleRef attribute identifies a PartnerRole that the
Participant plays in the Collaboration. Both a PartnerRole and a
PartnerEntity MAY be defined for the Participant. This attribute is
derived from the participantRefs of PartnerRole.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#plane>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMNDiagram [Class
+ plane : BPMNPlane [1] {redefines rootElement}
a BPMN plane element that is the container of all diagram elements in this diagram.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#process>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The Process owning the LaneSet" ;
.
<http://www.reiter.at/ontology/bpmn2.0#processRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The processRef attribute identifies the Process that the
Participant uses in the Collaboration. The Process will be
displayed within the Participant’s Pool.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#processType>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Process
The processType attribute Provides additional information about the
level of abstraction modeled by this Process.
A public Process shows only those flow elements that are relevant to
external consumers. Internal details are not modeled. These
Processes are publicly visible and can be used within a
Collaboration. Note that the public processType was named
abstract in BPMN 1.2.
A private Process is one that is internal to a specific organization.
By default, the processType is “none,” meaning undefined.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#properties>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
Modeler-defined properties MAY be added to an Activity. These properties are contained within the Activity.

Process
Modeler-defined properties MAY be added to a Process. These
properties are contained within the Process. All Tasks and SubProcesses
SHALL have access to these properties.

Event
Modeler-defined properties MAY be added to an Event. These
properties are contained within the Event.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#relationships>
  rdf:type owl:ObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#renderings>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This attributes acts as a hook which allows BPMN adopters to specify task
rendering attributes by using the BPMN Extension mechanism.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#resourceAssignmentExpression>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This defines the Expression used for the Resource
assignment (see below). Should not be specified when a
resourceRef is provided.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#resourceParameterBindings>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """This defines the Parameter bindings used for the
Resource assignment (see below). Is only applicable if a
resourceRef is specified.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#resourceParameters>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "This model association specifies the definition of the parameters needed at runtime to resolve the Resource." ;
.
<http://www.reiter.at/ontology/bpmn2.0#resourceRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The Resource that is associated with Activity. Should not
be specified when resourceAssignmentExpression is
provided.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#resources>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Activity
Defines the resource that will perform or will be responsible for the Activity. The resource, e.g., a performer, can be specified in the form of a specific individual, a group, an organization role or position, or an orga- nization.

Process
Defines the resource that will perform or will be responsible for the
Process. The resource, e.g., a performer, can be specified in the form
of a specific individual, a group, an organization role or position, or an
organization.
Note that the assigned resources of the Process does not determine
the assigned resources of the Activities that are contained by the
Process. See more details about resource assignment on page 154.

Global Task
Defines the resource that will perform or will be responsible for the
GlobalTask. In the case where the Call Activity that references this
GlobalTask defines its own resources, they will override the ones defined
here.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#rootElements>
  rdf:type owl:ObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#script>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "The modeler MAY include a script that can be run when the Task is per- formed. If a script is not included, then the Task will act as the equivalent of an Abstract Task." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#scriptFormat>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Defines the format of the script. This attribute value MUST be specified with a mime-type format. And it MUST be specified if a script is provided." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#signalRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "If the trigger is a Signal, then a Signal is provided." ;
.
<http://www.reiter.at/ontology/bpmn2.0#sourceElement>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMN Edge
• + sourceElement : DiagramElement [0..1] {redefines source}
an optional reference to the edge’s source element if it is different from the source inferred from the
bpmnElement association.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#sourceRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Association
The BaseElement that the Association is connecting from.

SequenceFlow
The FlowNode that the Sequence Flow is connecting from.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events
can be the source. However, Activities that are Event Sub-Processes are not
allowed to be a source.
For a Choreography: Of the types of FlowNode, only Choreography Activities,
Gateways, and Events can be the source

Message Flow 
The InteractionNode that the Message Flow is connecting from. Of
the types of InteractionNode, only Pools/Participants, Activities, and
Events can be the source of a Message Flow.

ConversationLink: The InteractionNode that the Conversation Link is connecting
from. A Conversation Link MUST connect to exactly one
ConversationNode. If the sourceRef is not a
ConversationNode, then the targetRef MUST be a
ConversationNode.

DataAssociation
Identifies the source of the Data Association. The source MUST be an
ItemAwareElement.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#sources>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """LinkEventDefinition
Used to reference the corresponding 'catch' or 'target' LinkEventDefinition, when
this LinkEventDefinition represents a 'throw' or 'source' LinkEventDefinition.

Relationship
This association defines artifacts that are augmented by the relationship.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#startQuantity>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "The default value is 1. The value MUST NOT be less than 1. This attribute defines the number of tokens that MUST arrive before the Activity can begin. Note that any value for the attribute that is greater than 1 is an advanced type of modeling and should be used with caution." ;
.
<http://www.reiter.at/ontology/bpmn2.0#state>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Process instance attributes
string=none
See Figure 13.2 (\"The Lifecycle of a BPMN Activity\") in
Section 13.2.2 for permissible values.

Activity instance attributes
string = None
See Figure 13.2 (\"The Lifecycle of a BPMN Activity\") in Section 13.2.2
for permissible values""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#structureRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Error
An ItemDefinition is used to define the “payload” of the Error.

Escalation
An ItemDefinition is used to define the “payload” of the Escalation.

ItemDefinition
The concrete data structure to be used""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#supportedInterfaceRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The Interfaces describing the external behavior provided by this element." ;
.
<http://www.reiter.at/ontology/bpmn2.0#supports>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Modelers can declare that they intend all executions or performances
of one Process to also be valid for another Process. This means they
expect all the executions or performances of the first Processes to also
follow the steps laid out in the second Process.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#target>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """LinkEventDefinition
Used to reference the corresponding 'throw' or 'source' LinkEventDefinition,
when this LinkEventDefinition represents a 'catch' or 'target' LinkEventDefinition.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#targetElement>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """BPMN Edge
• + targetElement : DiagramElement [0..1] {redefines target}
an optional reference to the edge’s target element if it is different from the target inferred from the bpmnElement
association.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#targetNamespace>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This attribute identifies the namespace associated with the Definition and follows the convention established by XML Schema." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#targetRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Association
The BaseElement that the Association is connecting to.

SequenceFlow
The FlowNode that the Sequence Flow is connecting to.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events
can be the target. However, Activities that are Event Sub-Processes are not
allowed to be a target.
For a Choreography: Of the types of FlowNode, only Choreography Activities,
Gateways, and Events can be the target.

Message Flow
The InteractionNode that the Message Flow is connecting to. Of the
types of InteractionNode, only Pools/Participants, Activities, and
Events can be the target of a Message Flow

Conversation Link
Participants in nested Collaboration or global
Collaborations, as identified by ParticipantAssociations. For example, Figure 9.30 has a Collaboration on
the left with a Call Conversations to a Collaboration on the right. The Conversation Links on the left indicate
Table 9.13 – Conversation Link Attributes and Model Associations
Attribute Name Description/Usage
name: string [0..1] This attribute specifies the name of the Conversation Link.
sourceRef: InteractionNode The InteractionNode that the Conversation Link is connecting
from. A Conversation Link MUST connect to exactly one
ConversationNode. If the sourceRef is not a
ConversationNode, then the targetRef MUST be a
ConversationNode.
targetRef: InteractionNode T


DataAssociation
Identifies the target of the Data Association. The target MUST be an
ItemAwareElement.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#targets>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """LinkEventDefinition
sed to reference the corresponding 'throw' or 'source' LinkEventDefinition,
when this LinkEventDefinition represents a 'catch' or 'target' LinkEventDefinition.

Relationship
This association defines artifacts used to extend the semantics of the source element(s).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#taskPriority>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "Returns the priority of the User Task." ;
.
<http://www.reiter.at/ontology/bpmn2.0#testBefore>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """testBefore: boolean = false
Flag that controls whether the loop condition is evaluated at the beginning
(testBefore = true) or at the end (testBefore = false) of the loop
iteration.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#text>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Documentation
This attribute is used to capture the text descriptions of a BPMN element.

Text Annotation
Text is an attribute that is text that the modeler wishes to communicate
to the reader of the Diagram.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#textFormat>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Documentation
This attribute identifies the format of the text. It MUST follow the mime-type
format. The default is \"text/plain.\"

Annotation
This attribute identifies the format of the text. It MUST follow the mimetype
format. The default is \"text/plain.\"""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#timeCycle>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """If the trigger is a Timer, then a timeCycle MAY be entered. Timer attributes are
mutually exclusive and if any of the other Timer attributes is set, timeCycle MUST
NOT be set (if the isExecutable attribute of the Process is set to true). The
return type of the attribute timeCycle MUST conform to the ISO-8601 format for
recurring time interval representations.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#timeDate>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """If the trigger is a Timer, then a timeDate MAY be entered. Timer attributes are
mutually exclusive and if any of the other Timer attributes is set, timeDate MUST
NOT be set (if the isExecutable attribute of the Process is set to true). The
return type of the attribute timeDate MUST conform to the ISO-8601 format for date
and time representations.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#timeDuration>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """If the trigger is a Timer, then a timeDuration MAY be entered. Timer attributes
are mutually exclusive and if any of the other Timer attributes is set, timeDuration
MUST NOT be set (if the isExecutable attribute of the Process is set to true).
The return type of the attribute timeDuration MUST conform to the ISO-8601
format for time interval representations.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#to>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Assignment
The Expression that defines the actual Assignment operation and the target
data element.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#top_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• top_initiating - the band should be depicted as a non shaded top band" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#top_non_initiating>
  rdf:type owl:Class ;
  rdfs:comment "• top_non_initiating - the band should be depicted as a shaded top band" ;
  rdfs:subClassOf <http://www.reiter.at/ontology/bpmn2.0#ParticipantBandKind> ;
.
<http://www.reiter.at/ontology/bpmn2.0#transformation>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """Specifies an optional transformation Expression. The actual scope of
accessible data for that Expression is defined by the source and target of
the specific Data Association types.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#triggeredByEvent>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """A flag that identifies whether this Sub-Process is an Event Sub-Process.

• If false, then this Sub-Process is a normal Sub-Process.

• If true, then this Sub-Process is an Event Sub-Process and is subject to additional constraints (see page 176).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#type>
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:ObjectProperty ;
  rdfs:comment """ExtensionAttributeDefinition
The type that is associated with the attribute.

Relationship
The descriptive name of the element.

CorrelationProperty
Specifies the type of the CorrelationProperty.

ResourceParameter
Specifies the type of the query parameter.""" ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#typeLanguage>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment "This attribute identifies the type system used by the elements of this Definition. Defaults to http://www.w3.org/2001/XMLSchema. This value can be overridden on each individual ItemDefinition. The language MUST be specified in a URI format." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#userTask>
  rdf:type owl:ObjectProperty ;
.
<http://www.reiter.at/ontology/bpmn2.0#value>
  rdf:type owl:DatatypeProperty ;
  rdf:type owl:ObjectProperty ;
  rdfs:comment """CategoryValue
This attribute provides the value of the CategoryValue element.

ExtensionAttributeValue
The contained attribute value, used when the associated ExtensionAttributeDefinition.isReference is false.
The type of this Element MUST conform to the type specified in the associated ExtensionAttributeDefinition.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#valueRef>
  rdf:type owl:ObjectProperty ;
  rdfs:comment "The referenced attribute value, used when the associated ExtensionAttributeDefinition.isReference is true. The type of this Element MUST conform to the type specified in the associated ExtensionAttributeDefinition." ;
.
<http://www.reiter.at/ontology/bpmn2.0#waitForCompletion>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """For a throw Compensation Event, this flag determines whether the throw
Intermediate Event waits for the triggered compensation to complete (the default),
or just triggers the compensation and immediately continues (the BPMN 1.2
behavior).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#waitingForStart>
  rdf:type owl:DatatypeProperty ;
  rdfs:comment """Represents the internal state of the Complex Gateway. It is either waiting
for start (=true) or waiting for reset (=false).""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#whileExecutingInputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The DataInput elements that are a part of the InputSet that can be evaluated
while the Activity is executing. This association MUST NOT reference a
DataInput that is not listed in the dataInputRefs.""" ;
.
<http://www.reiter.at/ontology/bpmn2.0#whileExecutingOutputRefs>
  rdf:type owl:ObjectProperty ;
  rdfs:comment """The DataOutput elements that are a part of the OutputSet that can
be produced while the Activity is executing. This association MUST
NOT reference a DataOutput that is not listed in the
dataOutputRefs.""" ;
.
owl:topDataProperty
  rdfs:comment """This attribute is used to import externally defined elements and make
them available for use by elements within this Definitions.""" ;
.
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#Association>
      <http://www.reiter.at/ontology/bpmn2.0#Group>
      <http://www.reiter.at/ontology/bpmn2.0#TextAnnotation>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#Backward>
      <http://www.reiter.at/ontology/bpmn2.0#Both>
      <http://www.reiter.at/ontology/bpmn2.0#Forward>
      <http://www.reiter.at/ontology/bpmn2.0#None>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#BusinessRuleTask>
      <http://www.reiter.at/ontology/bpmn2.0#ManualTask>
      <http://www.reiter.at/ontology/bpmn2.0#ReceiveTask>
      <http://www.reiter.at/ontology/bpmn2.0#ScriptTask>
      <http://www.reiter.at/ontology/bpmn2.0#SendTask>
      <http://www.reiter.at/ontology/bpmn2.0#ServiceTask>
      <http://www.reiter.at/ontology/bpmn2.0#UserTask>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#CallActivity>
      <http://www.reiter.at/ontology/bpmn2.0#SubProcess>
      <http://www.reiter.at/ontology/bpmn2.0#Task>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#CancelEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#CompensationEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#ConditionalEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#ErrorEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#EscalationEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#LinkEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#MessageEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#SignalEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#TerminateEventDefinition>
      <http://www.reiter.at/ontology/bpmn2.0#TimerEventDefinition>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#ComplexGateway>
      <http://www.reiter.at/ontology/bpmn2.0#EventBasedGateway>
      <http://www.reiter.at/ontology/bpmn2.0#ExclusiveGateway>
      <http://www.reiter.at/ontology/bpmn2.0#InclusiveGateway>
      <http://www.reiter.at/ontology/bpmn2.0#ParallelGateway>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#Converging>
      <http://www.reiter.at/ontology/bpmn2.0#Diverging>
      <http://www.reiter.at/ontology/bpmn2.0#Mixed>
      <http://www.reiter.at/ontology/bpmn2.0#Unspecified>
    ) ;
].
[
  rdf:type owl:AllDisjointClasses ;
  owl:members (
      <http://www.reiter.at/ontology/bpmn2.0#EndEvent>
      <http://www.reiter.at/ontology/bpmn2.0#ImplicitThrowEvent>
      <http://www.reiter.at/ontology/bpmn2.0#IntermediateThrowEvent>
    ) ;
].
